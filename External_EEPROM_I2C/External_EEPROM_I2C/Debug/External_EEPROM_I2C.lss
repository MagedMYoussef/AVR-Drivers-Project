
External_EEPROM_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000672  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001638  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000057e  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000c0  00000000  00000000  00002280  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000606  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000021e  00000000  00000000  00002946  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004df  00000000  00000000  00002b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001a4  00000000  00000000  00003044  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001df  00000000  00000000  000031e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002d7  00000000  00000000  000033c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  8a:	0c 94 37 03 	jmp	0x66e	; 0x66e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_Init>:
 * Created: 3/12/2014 12:06:35 PM
 *  Author: Mohamed Tarek
 */ 
#include "External_EEPROM.h"

void EEPROM_Init(void){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	TWI_Init(); // just intialize the TWI(I2C) module inside the MC
  9a:	0e 94 99 01 	call	0x332	; 0x332 <TWI_Init>
}
  9e:	df 91       	pop	r29
  a0:	cf 91       	pop	r28
  a2:	08 95       	ret

000000a4 <EEPROM_Write_Byte>:

unsigned char EEPROM_Write_Byte(unsigned short u16addr, unsigned char u8data)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	00 d0       	rcall	.+0      	; 0xaa <EEPROM_Write_Byte+0x6>
  aa:	0f 92       	push	r0
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	9a 83       	std	Y+2, r25	; 0x02
  b2:	89 83       	std	Y+1, r24	; 0x01
  b4:	6b 83       	std	Y+3, r22	; 0x03
    TWI_Start();
  b6:	0e 94 b3 01 	call	0x366	; 0x366 <TWI_Start>
    if (TWI_Get_Status() != TW_START)
  ba:	0e 94 1b 02 	call	0x436	; 0x436 <TWI_Get_Status>
  be:	88 30       	cpi	r24, 0x08	; 8
  c0:	11 f0       	breq	.+4      	; 0xc6 <EEPROM_Write_Byte+0x22>
        return ERROR;
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	27 c0       	rjmp	.+78     	; 0x114 <EEPROM_Write_Byte+0x70>
	address all bytes 11 bits addressing is used	
    24Cxx chips have four high bit fixed ID which his 0b1010 lower three
    bits are used for addressing chip memory
	write the device address and so we need to get A8 A9 A10 address 
	bits and R/W=0 (write)*/
	TWI_Write(0xA0 | (unsigned char)((u16addr & 0x0700)>>7));// 1010 1110 
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	9a 81       	ldd	r25, Y+2	; 0x02
  ca:	80 70       	andi	r24, 0x00	; 0
  cc:	97 70       	andi	r25, 0x07	; 7
  ce:	88 0f       	add	r24, r24
  d0:	89 2f       	mov	r24, r25
  d2:	88 1f       	adc	r24, r24
  d4:	99 0b       	sbc	r25, r25
  d6:	91 95       	neg	r25
  d8:	80 6a       	ori	r24, 0xA0	; 160
  da:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
  de:	0e 94 1b 02 	call	0x436	; 0x436 <TWI_Get_Status>
  e2:	88 31       	cpi	r24, 0x18	; 24
  e4:	11 f0       	breq	.+4      	; 0xea <EEPROM_Write_Byte+0x46>
        return ERROR; 
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	15 c0       	rjmp	.+42     	; 0x114 <EEPROM_Write_Byte+0x70>
		 
    //send the required location address
    TWI_Write((unsigned char)(u16addr));// word address
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
  f0:	0e 94 1b 02 	call	0x436	; 0x436 <TWI_Get_Status>
  f4:	88 32       	cpi	r24, 0x28	; 40
  f6:	11 f0       	breq	.+4      	; 0xfc <EEPROM_Write_Byte+0x58>
        return ERROR;
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0c c0       	rjmp	.+24     	; 0x114 <EEPROM_Write_Byte+0x70>
		
    //write byte to eeprom
    TWI_Write(u8data);
  fc:	8b 81       	ldd	r24, Y+3	; 0x03
  fe:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
 102:	0e 94 1b 02 	call	0x436	; 0x436 <TWI_Get_Status>
 106:	88 32       	cpi	r24, 0x28	; 40
 108:	11 f0       	breq	.+4      	; 0x10e <EEPROM_Write_Byte+0x6a>
        return ERROR;
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	03 c0       	rjmp	.+6      	; 0x114 <EEPROM_Write_Byte+0x70>
		
    TWI_Stop();
 10e:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_Stop>
	
    return SUCCESS;
 112:	81 e0       	ldi	r24, 0x01	; 1
}
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <EEPROM_Read_Byte>:

unsigned char EEPROM_Read_Byte(unsigned short u16addr, unsigned char *u8data)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	00 d0       	rcall	.+0      	; 0x126 <EEPROM_Read_Byte+0x6>
 126:	00 d0       	rcall	.+0      	; 0x128 <EEPROM_Read_Byte+0x8>
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	9a 83       	std	Y+2, r25	; 0x02
 12e:	89 83       	std	Y+1, r24	; 0x01
 130:	7c 83       	std	Y+4, r23	; 0x04
 132:	6b 83       	std	Y+3, r22	; 0x03
    TWI_Start();
 134:	0e 94 b3 01 	call	0x366	; 0x366 <TWI_Start>
    if (TWI_Get_Status() != TW_START)
 138:	0e 94 1b 02 	call	0x436	; 0x436 <TWI_Get_Status>
 13c:	88 30       	cpi	r24, 0x08	; 8
 13e:	11 f0       	breq	.+4      	; 0x144 <EEPROM_Read_Byte+0x24>
        return ERROR;
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	45 c0       	rjmp	.+138    	; 0x1ce <EEPROM_Read_Byte+0xae>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
    TWI_Write((0xA0) | ((unsigned char)((u16addr & 0x0700)>>7)));
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	9a 81       	ldd	r25, Y+2	; 0x02
 148:	80 70       	andi	r24, 0x00	; 0
 14a:	97 70       	andi	r25, 0x07	; 7
 14c:	88 0f       	add	r24, r24
 14e:	89 2f       	mov	r24, r25
 150:	88 1f       	adc	r24, r24
 152:	99 0b       	sbc	r25, r25
 154:	91 95       	neg	r25
 156:	80 6a       	ori	r24, 0xA0	; 160
 158:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
 15c:	0e 94 1b 02 	call	0x436	; 0x436 <TWI_Get_Status>
 160:	88 31       	cpi	r24, 0x18	; 24
 162:	11 f0       	breq	.+4      	; 0x168 <EEPROM_Read_Byte+0x48>
        return ERROR;
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	33 c0       	rjmp	.+102    	; 0x1ce <EEPROM_Read_Byte+0xae>
		
    //send the required location address
    TWI_Write((unsigned char)(u16addr));// word address 
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
 16e:	0e 94 1b 02 	call	0x436	; 0x436 <TWI_Get_Status>
 172:	88 32       	cpi	r24, 0x28	; 40
 174:	11 f0       	breq	.+4      	; 0x17a <EEPROM_Read_Byte+0x5a>
        return ERROR;
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	2a c0       	rjmp	.+84     	; 0x1ce <EEPROM_Read_Byte+0xae>
		
    //send a repeated start
    TWI_Start();
 17a:	0e 94 b3 01 	call	0x366	; 0x366 <TWI_Start>
    if (TWI_Get_Status() != TW_REP_START)
 17e:	0e 94 1b 02 	call	0x436	; 0x436 <TWI_Get_Status>
 182:	80 31       	cpi	r24, 0x10	; 16
 184:	11 f0       	breq	.+4      	; 0x18a <EEPROM_Read_Byte+0x6a>
        return ERROR;
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	22 c0       	rjmp	.+68     	; 0x1ce <EEPROM_Read_Byte+0xae>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=1 (Read)
    TWI_Write((0xA0) | ((unsigned char)((u16addr & 0x0700)>>7))|1);
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	80 70       	andi	r24, 0x00	; 0
 190:	97 70       	andi	r25, 0x07	; 7
 192:	88 0f       	add	r24, r24
 194:	89 2f       	mov	r24, r25
 196:	88 1f       	adc	r24, r24
 198:	99 0b       	sbc	r25, r25
 19a:	91 95       	neg	r25
 19c:	81 6a       	ori	r24, 0xA1	; 161
 19e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
 1a2:	0e 94 1b 02 	call	0x436	; 0x436 <TWI_Get_Status>
 1a6:	80 34       	cpi	r24, 0x40	; 64
 1a8:	11 f0       	breq	.+4      	; 0x1ae <EEPROM_Read_Byte+0x8e>
        return ERROR;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	10 c0       	rjmp	.+32     	; 0x1ce <EEPROM_Read_Byte+0xae>
		
    *u8data = TWI_Read_With_NACK();
 1ae:	0e 94 04 02 	call	0x408	; 0x408 <TWI_Read_With_NACK>
 1b2:	28 2f       	mov	r18, r24
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	9c 81       	ldd	r25, Y+4	; 0x04
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
    if (TWI_Get_Status() != TW_MR_DATA_NACK)
 1bc:	0e 94 1b 02 	call	0x436	; 0x436 <TWI_Get_Status>
 1c0:	88 35       	cpi	r24, 0x58	; 88
 1c2:	11 f0       	breq	.+4      	; 0x1c8 <EEPROM_Read_Byte+0xa8>
        return ERROR;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <EEPROM_Read_Byte+0xae>
		
    TWI_Stop();
 1c8:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_Stop>
    return SUCCESS;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
}
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <main>:
#include <util/delay.h>

#include"External_EEPROM.h"

int main(void)
{
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	2f 97       	sbiw	r28, 0x0f	; 15
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
	unsigned char val = 0;
 1f4:	1f 86       	std	Y+15, r1	; 0x0f
	
	DDRA = 0xFF;
 1f6:	8a e3       	ldi	r24, 0x3A	; 58
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 83       	st	Z, r18
	PORTA = 0x00;
 200:	8b e3       	ldi	r24, 0x3B	; 59
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	fc 01       	movw	r30, r24
 206:	10 82       	st	Z, r1

	// Init EEPROM
	EEPROM_Init();
 208:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_Init>

	EEPROM_Write_Byte(0x0311, 0x01); // Write 0xFF in the external EEPROM
 20c:	81 e1       	ldi	r24, 0x11	; 17
 20e:	93 e0       	ldi	r25, 0x03	; 3
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	0e 94 52 00 	call	0xa4	; 0xa4 <EEPROM_Write_Byte>
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	a0 e2       	ldi	r26, 0x20	; 32
 21c:	b1 e4       	ldi	r27, 0x41	; 65
 21e:	89 83       	std	Y+1, r24	; 0x01
 220:	9a 83       	std	Y+2, r25	; 0x02
 222:	ab 83       	std	Y+3, r26	; 0x03
 224:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 226:	69 81       	ldd	r22, Y+1	; 0x01
 228:	7a 81       	ldd	r23, Y+2	; 0x02
 22a:	8b 81       	ldd	r24, Y+3	; 0x03
 22c:	9c 81       	ldd	r25, Y+4	; 0x04
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	4a ef       	ldi	r20, 0xFA	; 250
 234:	54 e4       	ldi	r21, 0x44	; 68
 236:	0e 94 ac 02 	call	0x558	; 0x558 <__mulsf3>
 23a:	dc 01       	movw	r26, r24
 23c:	cb 01       	movw	r24, r22
 23e:	8d 83       	std	Y+5, r24	; 0x05
 240:	9e 83       	std	Y+6, r25	; 0x06
 242:	af 83       	std	Y+7, r26	; 0x07
 244:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 246:	11 e0       	ldi	r17, 0x01	; 1
 248:	6d 81       	ldd	r22, Y+5	; 0x05
 24a:	7e 81       	ldd	r23, Y+6	; 0x06
 24c:	8f 81       	ldd	r24, Y+7	; 0x07
 24e:	98 85       	ldd	r25, Y+8	; 0x08
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	40 e8       	ldi	r20, 0x80	; 128
 256:	5f e3       	ldi	r21, 0x3F	; 63
 258:	0e 94 2b 02 	call	0x456	; 0x456 <__cmpsf2>
 25c:	88 23       	and	r24, r24
 25e:	0c f0       	brlt	.+2      	; 0x262 <main+0x86>
 260:	10 e0       	ldi	r17, 0x00	; 0
 262:	11 23       	and	r17, r17
 264:	29 f0       	breq	.+10     	; 0x270 <main+0x94>
		__ticks = 1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	9a 87       	std	Y+10, r25	; 0x0a
 26c:	89 87       	std	Y+9, r24	; 0x09
 26e:	46 c0       	rjmp	.+140    	; 0x2fc <main+0x120>
	else if (__tmp > 65535)
 270:	11 e0       	ldi	r17, 0x01	; 1
 272:	6d 81       	ldd	r22, Y+5	; 0x05
 274:	7e 81       	ldd	r23, Y+6	; 0x06
 276:	8f 81       	ldd	r24, Y+7	; 0x07
 278:	98 85       	ldd	r25, Y+8	; 0x08
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	3f ef       	ldi	r19, 0xFF	; 255
 27e:	4f e7       	ldi	r20, 0x7F	; 127
 280:	57 e4       	ldi	r21, 0x47	; 71
 282:	0e 94 a8 02 	call	0x550	; 0x550 <__gesf2>
 286:	18 16       	cp	r1, r24
 288:	0c f0       	brlt	.+2      	; 0x28c <main+0xb0>
 28a:	10 e0       	ldi	r17, 0x00	; 0
 28c:	11 23       	and	r17, r17
 28e:	61 f1       	breq	.+88     	; 0x2e8 <main+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 290:	69 81       	ldd	r22, Y+1	; 0x01
 292:	7a 81       	ldd	r23, Y+2	; 0x02
 294:	8b 81       	ldd	r24, Y+3	; 0x03
 296:	9c 81       	ldd	r25, Y+4	; 0x04
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	40 e2       	ldi	r20, 0x20	; 32
 29e:	51 e4       	ldi	r21, 0x41	; 65
 2a0:	0e 94 ac 02 	call	0x558	; 0x558 <__mulsf3>
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22
 2a8:	bc 01       	movw	r22, r24
 2aa:	cd 01       	movw	r24, r26
 2ac:	0e 94 2f 02 	call	0x45e	; 0x45e <__fixunssfsi>
 2b0:	dc 01       	movw	r26, r24
 2b2:	cb 01       	movw	r24, r22
 2b4:	9a 87       	std	Y+10, r25	; 0x0a
 2b6:	89 87       	std	Y+9, r24	; 0x09
 2b8:	12 c0       	rjmp	.+36     	; 0x2de <main+0x102>
 2ba:	88 ec       	ldi	r24, 0xC8	; 200
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	9c 87       	std	Y+12, r25	; 0x0c
 2c0:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2c2:	8b 85       	ldd	r24, Y+11	; 0x0b
 2c4:	9c 85       	ldd	r25, Y+12	; 0x0c
 2c6:	8c 01       	movw	r16, r24
 2c8:	c8 01       	movw	r24, r16
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <main+0xee>
 2ce:	8c 01       	movw	r16, r24
 2d0:	1c 87       	std	Y+12, r17	; 0x0c
 2d2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d4:	89 85       	ldd	r24, Y+9	; 0x09
 2d6:	9a 85       	ldd	r25, Y+10	; 0x0a
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	9a 87       	std	Y+10, r25	; 0x0a
 2dc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2de:	89 85       	ldd	r24, Y+9	; 0x09
 2e0:	9a 85       	ldd	r25, Y+10	; 0x0a
 2e2:	00 97       	sbiw	r24, 0x00	; 0
 2e4:	51 f7       	brne	.-44     	; 0x2ba <main+0xde>
 2e6:	17 c0       	rjmp	.+46     	; 0x316 <main+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2e8:	6d 81       	ldd	r22, Y+5	; 0x05
 2ea:	7e 81       	ldd	r23, Y+6	; 0x06
 2ec:	8f 81       	ldd	r24, Y+7	; 0x07
 2ee:	98 85       	ldd	r25, Y+8	; 0x08
 2f0:	0e 94 2f 02 	call	0x45e	; 0x45e <__fixunssfsi>
 2f4:	dc 01       	movw	r26, r24
 2f6:	cb 01       	movw	r24, r22
 2f8:	9a 87       	std	Y+10, r25	; 0x0a
 2fa:	89 87       	std	Y+9, r24	; 0x09
 2fc:	89 85       	ldd	r24, Y+9	; 0x09
 2fe:	9a 85       	ldd	r25, Y+10	; 0x0a
 300:	9e 87       	std	Y+14, r25	; 0x0e
 302:	8d 87       	std	Y+13, r24	; 0x0d
 304:	8d 85       	ldd	r24, Y+13	; 0x0d
 306:	9e 85       	ldd	r25, Y+14	; 0x0e
 308:	8c 01       	movw	r16, r24
 30a:	f8 01       	movw	r30, r16
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <main+0x130>
 310:	8f 01       	movw	r16, r30
 312:	1e 87       	std	Y+14, r17	; 0x0e
 314:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	EEPROM_Read_Byte(0x0311, &val); // Read 0xFF from the external EEPROM
 316:	9e 01       	movw	r18, r28
 318:	21 5f       	subi	r18, 0xF1	; 241
 31a:	3f 4f       	sbci	r19, 0xFF	; 255
 31c:	81 e1       	ldi	r24, 0x11	; 17
 31e:	93 e0       	ldi	r25, 0x03	; 3
 320:	b9 01       	movw	r22, r18
 322:	0e 94 90 00 	call	0x120	; 0x120 <EEPROM_Read_Byte>
	while(1)
	{
		PORTA = val; // out the read value from the external EEPROM
 326:	8b e3       	ldi	r24, 0x3B	; 59
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	2f 85       	ldd	r18, Y+15	; 0x0f
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
	}
 330:	fa cf       	rjmp	.-12     	; 0x326 <main+0x14a>

00000332 <TWI_Init>:
 *  Author: Mohamed Tarek
 */ 
#include "I2C.h"

void TWI_Init(void)
{
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
    // Bit Rate: 400.000 kHz
    TWBR=0x02;
 33a:	80 e2       	ldi	r24, 0x20	; 32
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	22 e0       	ldi	r18, 0x02	; 2
 340:	fc 01       	movw	r30, r24
 342:	20 83       	st	Z, r18
	TWSR=0x00;
 344:	81 e2       	ldi	r24, 0x21	; 33
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	fc 01       	movw	r30, r24
 34a:	10 82       	st	Z, r1
	
    // Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
    // General Call Recognition: Off
    TWAR=0b00000010; // my address=0x01 :) 
 34c:	82 e2       	ldi	r24, 0x22	; 34
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	22 e0       	ldi	r18, 0x02	; 2
 352:	fc 01       	movw	r30, r24
 354:	20 83       	st	Z, r18
	
    TWCR=(1<<TWEN); //enable TWI
 356:	86 e5       	ldi	r24, 0x56	; 86
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	24 e0       	ldi	r18, 0x04	; 4
 35c:	fc 01       	movw	r30, r24
 35e:	20 83       	st	Z, r18
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <TWI_Start>:

void TWI_Start(void)
{
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
    /* Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 36e:	86 e5       	ldi	r24, 0x56	; 86
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	24 ea       	ldi	r18, 0xA4	; 164
 374:	fc 01       	movw	r30, r24
 376:	20 83       	st	Z, r18
    
    // Wait for TWINT flag set in TWCR Register (start bit is send successfully) 
    while (!(TWCR & (1 << TWINT)));
 378:	00 00       	nop
 37a:	86 e5       	ldi	r24, 0x56	; 86
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	fc 01       	movw	r30, r24
 380:	80 81       	ld	r24, Z
 382:	88 23       	and	r24, r24
 384:	d4 f7       	brge	.-12     	; 0x37a <TWI_Start+0x14>
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <TWI_Stop>:

void TWI_Stop(void)
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
    /* Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 394:	86 e5       	ldi	r24, 0x56	; 86
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	24 e9       	ldi	r18, 0x94	; 148
 39a:	fc 01       	movw	r30, r24
 39c:	20 83       	st	Z, r18
}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <TWI_Write>:

void TWI_Write(unsigned char data)
{
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	0f 92       	push	r0
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	89 83       	std	Y+1, r24	; 0x01
    // Put data On TWI Register
    TWDR = data;
 3b0:	83 e2       	ldi	r24, 0x23	; 35
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	29 81       	ldd	r18, Y+1	; 0x01
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18
    /* Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
 3ba:	86 e5       	ldi	r24, 0x56	; 86
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	24 e8       	ldi	r18, 0x84	; 132
 3c0:	fc 01       	movw	r30, r24
 3c2:	20 83       	st	Z, r18
    // Wait for TWINT flag set in TWCR Register(data is send successfully) 
    while (!(TWCR & (1 << TWINT)));
 3c4:	00 00       	nop
 3c6:	86 e5       	ldi	r24, 0x56	; 86
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	fc 01       	movw	r30, r24
 3cc:	80 81       	ld	r24, Z
 3ce:	88 23       	and	r24, r24
 3d0:	d4 f7       	brge	.-12     	; 0x3c6 <TWI_Write+0x22>
}
 3d2:	0f 90       	pop	r0
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <TWI_Read_With_ACK>:

unsigned char TWI_Read_With_ACK(void)
{
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
	/* Clear the TWINT flag before reading the data TWINT=1
	 * enable sending ACK TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1<<TWEA);
 3e2:	86 e5       	ldi	r24, 0x56	; 86
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	24 ec       	ldi	r18, 0xC4	; 196
 3e8:	fc 01       	movw	r30, r24
 3ea:	20 83       	st	Z, r18
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while (!(TWCR & (1 << TWINT)));
 3ec:	00 00       	nop
 3ee:	86 e5       	ldi	r24, 0x56	; 86
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	fc 01       	movw	r30, r24
 3f4:	80 81       	ld	r24, Z
 3f6:	88 23       	and	r24, r24
 3f8:	d4 f7       	brge	.-12     	; 0x3ee <TWI_Read_With_ACK+0x14>
    // Read Data
    return TWDR;
 3fa:	83 e2       	ldi	r24, 0x23	; 35
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	fc 01       	movw	r30, r24
 400:	80 81       	ld	r24, Z
}
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <TWI_Read_With_NACK>:

unsigned char TWI_Read_With_NACK(void)
{
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
	/* Clear the TWINT flag before reading the data TWINT=1
	 * enable sending ACK TWEA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
 410:	86 e5       	ldi	r24, 0x56	; 86
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	24 e8       	ldi	r18, 0x84	; 132
 416:	fc 01       	movw	r30, r24
 418:	20 83       	st	Z, r18
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while (!(TWCR & (1 << TWINT)));
 41a:	00 00       	nop
 41c:	86 e5       	ldi	r24, 0x56	; 86
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	fc 01       	movw	r30, r24
 422:	80 81       	ld	r24, Z
 424:	88 23       	and	r24, r24
 426:	d4 f7       	brge	.-12     	; 0x41c <TWI_Read_With_NACK+0x14>
    // Read Data
    return TWDR;
 428:	83 e2       	ldi	r24, 0x23	; 35
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	fc 01       	movw	r30, r24
 42e:	80 81       	ld	r24, Z
}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <TWI_Get_Status>:

unsigned char TWI_Get_Status(void)
{
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	0f 92       	push	r0
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
    unsigned char status;
    status = TWSR & 0xF8; //masking to eliminate first 3 bits 
 440:	81 e2       	ldi	r24, 0x21	; 33
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	fc 01       	movw	r30, r24
 446:	80 81       	ld	r24, Z
 448:	88 7f       	andi	r24, 0xF8	; 248
 44a:	89 83       	std	Y+1, r24	; 0x01
    return status;
 44c:	89 81       	ldd	r24, Y+1	; 0x01
}
 44e:	0f 90       	pop	r0
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <__cmpsf2>:
 456:	2f d0       	rcall	.+94     	; 0x4b6 <__fp_cmp>
 458:	08 f4       	brcc	.+2      	; 0x45c <__cmpsf2+0x6>
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	08 95       	ret

0000045e <__fixunssfsi>:
 45e:	57 d0       	rcall	.+174    	; 0x50e <__fp_splitA>
 460:	88 f0       	brcs	.+34     	; 0x484 <__stack+0x25>
 462:	9f 57       	subi	r25, 0x7F	; 127
 464:	90 f0       	brcs	.+36     	; 0x48a <__stack+0x2b>
 466:	b9 2f       	mov	r27, r25
 468:	99 27       	eor	r25, r25
 46a:	b7 51       	subi	r27, 0x17	; 23
 46c:	a0 f0       	brcs	.+40     	; 0x496 <__stack+0x37>
 46e:	d1 f0       	breq	.+52     	; 0x4a4 <__stack+0x45>
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	88 1f       	adc	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	1a f0       	brmi	.+6      	; 0x480 <__stack+0x21>
 47a:	ba 95       	dec	r27
 47c:	c9 f7       	brne	.-14     	; 0x470 <__stack+0x11>
 47e:	12 c0       	rjmp	.+36     	; 0x4a4 <__stack+0x45>
 480:	b1 30       	cpi	r27, 0x01	; 1
 482:	81 f0       	breq	.+32     	; 0x4a4 <__stack+0x45>
 484:	5e d0       	rcall	.+188    	; 0x542 <__fp_zero>
 486:	b1 e0       	ldi	r27, 0x01	; 1
 488:	08 95       	ret
 48a:	5b c0       	rjmp	.+182    	; 0x542 <__fp_zero>
 48c:	67 2f       	mov	r22, r23
 48e:	78 2f       	mov	r23, r24
 490:	88 27       	eor	r24, r24
 492:	b8 5f       	subi	r27, 0xF8	; 248
 494:	39 f0       	breq	.+14     	; 0x4a4 <__stack+0x45>
 496:	b9 3f       	cpi	r27, 0xF9	; 249
 498:	cc f3       	brlt	.-14     	; 0x48c <__stack+0x2d>
 49a:	86 95       	lsr	r24
 49c:	77 95       	ror	r23
 49e:	67 95       	ror	r22
 4a0:	b3 95       	inc	r27
 4a2:	d9 f7       	brne	.-10     	; 0x49a <__stack+0x3b>
 4a4:	3e f4       	brtc	.+14     	; 0x4b4 <__stack+0x55>
 4a6:	90 95       	com	r25
 4a8:	80 95       	com	r24
 4aa:	70 95       	com	r23
 4ac:	61 95       	neg	r22
 4ae:	7f 4f       	sbci	r23, 0xFF	; 255
 4b0:	8f 4f       	sbci	r24, 0xFF	; 255
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
 4b4:	08 95       	ret

000004b6 <__fp_cmp>:
 4b6:	99 0f       	add	r25, r25
 4b8:	00 08       	sbc	r0, r0
 4ba:	55 0f       	add	r21, r21
 4bc:	aa 0b       	sbc	r26, r26
 4be:	e0 e8       	ldi	r30, 0x80	; 128
 4c0:	fe ef       	ldi	r31, 0xFE	; 254
 4c2:	16 16       	cp	r1, r22
 4c4:	17 06       	cpc	r1, r23
 4c6:	e8 07       	cpc	r30, r24
 4c8:	f9 07       	cpc	r31, r25
 4ca:	c0 f0       	brcs	.+48     	; 0x4fc <__fp_cmp+0x46>
 4cc:	12 16       	cp	r1, r18
 4ce:	13 06       	cpc	r1, r19
 4d0:	e4 07       	cpc	r30, r20
 4d2:	f5 07       	cpc	r31, r21
 4d4:	98 f0       	brcs	.+38     	; 0x4fc <__fp_cmp+0x46>
 4d6:	62 1b       	sub	r22, r18
 4d8:	73 0b       	sbc	r23, r19
 4da:	84 0b       	sbc	r24, r20
 4dc:	95 0b       	sbc	r25, r21
 4de:	39 f4       	brne	.+14     	; 0x4ee <__fp_cmp+0x38>
 4e0:	0a 26       	eor	r0, r26
 4e2:	61 f0       	breq	.+24     	; 0x4fc <__fp_cmp+0x46>
 4e4:	23 2b       	or	r18, r19
 4e6:	24 2b       	or	r18, r20
 4e8:	25 2b       	or	r18, r21
 4ea:	21 f4       	brne	.+8      	; 0x4f4 <__fp_cmp+0x3e>
 4ec:	08 95       	ret
 4ee:	0a 26       	eor	r0, r26
 4f0:	09 f4       	brne	.+2      	; 0x4f4 <__fp_cmp+0x3e>
 4f2:	a1 40       	sbci	r26, 0x01	; 1
 4f4:	a6 95       	lsr	r26
 4f6:	8f ef       	ldi	r24, 0xFF	; 255
 4f8:	81 1d       	adc	r24, r1
 4fa:	81 1d       	adc	r24, r1
 4fc:	08 95       	ret

000004fe <__fp_split3>:
 4fe:	57 fd       	sbrc	r21, 7
 500:	90 58       	subi	r25, 0x80	; 128
 502:	44 0f       	add	r20, r20
 504:	55 1f       	adc	r21, r21
 506:	59 f0       	breq	.+22     	; 0x51e <__fp_splitA+0x10>
 508:	5f 3f       	cpi	r21, 0xFF	; 255
 50a:	71 f0       	breq	.+28     	; 0x528 <__fp_splitA+0x1a>
 50c:	47 95       	ror	r20

0000050e <__fp_splitA>:
 50e:	88 0f       	add	r24, r24
 510:	97 fb       	bst	r25, 7
 512:	99 1f       	adc	r25, r25
 514:	61 f0       	breq	.+24     	; 0x52e <__fp_splitA+0x20>
 516:	9f 3f       	cpi	r25, 0xFF	; 255
 518:	79 f0       	breq	.+30     	; 0x538 <__fp_splitA+0x2a>
 51a:	87 95       	ror	r24
 51c:	08 95       	ret
 51e:	12 16       	cp	r1, r18
 520:	13 06       	cpc	r1, r19
 522:	14 06       	cpc	r1, r20
 524:	55 1f       	adc	r21, r21
 526:	f2 cf       	rjmp	.-28     	; 0x50c <__fp_split3+0xe>
 528:	46 95       	lsr	r20
 52a:	f1 df       	rcall	.-30     	; 0x50e <__fp_splitA>
 52c:	08 c0       	rjmp	.+16     	; 0x53e <__fp_splitA+0x30>
 52e:	16 16       	cp	r1, r22
 530:	17 06       	cpc	r1, r23
 532:	18 06       	cpc	r1, r24
 534:	99 1f       	adc	r25, r25
 536:	f1 cf       	rjmp	.-30     	; 0x51a <__fp_splitA+0xc>
 538:	86 95       	lsr	r24
 53a:	71 05       	cpc	r23, r1
 53c:	61 05       	cpc	r22, r1
 53e:	08 94       	sec
 540:	08 95       	ret

00000542 <__fp_zero>:
 542:	e8 94       	clt

00000544 <__fp_szero>:
 544:	bb 27       	eor	r27, r27
 546:	66 27       	eor	r22, r22
 548:	77 27       	eor	r23, r23
 54a:	cb 01       	movw	r24, r22
 54c:	97 f9       	bld	r25, 7
 54e:	08 95       	ret

00000550 <__gesf2>:
 550:	b2 df       	rcall	.-156    	; 0x4b6 <__fp_cmp>
 552:	08 f4       	brcc	.+2      	; 0x556 <__gesf2+0x6>
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	08 95       	ret

00000558 <__mulsf3>:
 558:	0b d0       	rcall	.+22     	; 0x570 <__mulsf3x>
 55a:	78 c0       	rjmp	.+240    	; 0x64c <__fp_round>
 55c:	69 d0       	rcall	.+210    	; 0x630 <__fp_pscA>
 55e:	28 f0       	brcs	.+10     	; 0x56a <__mulsf3+0x12>
 560:	6e d0       	rcall	.+220    	; 0x63e <__fp_pscB>
 562:	18 f0       	brcs	.+6      	; 0x56a <__mulsf3+0x12>
 564:	95 23       	and	r25, r21
 566:	09 f0       	breq	.+2      	; 0x56a <__mulsf3+0x12>
 568:	5a c0       	rjmp	.+180    	; 0x61e <__fp_inf>
 56a:	5f c0       	rjmp	.+190    	; 0x62a <__fp_nan>
 56c:	11 24       	eor	r1, r1
 56e:	ea cf       	rjmp	.-44     	; 0x544 <__fp_szero>

00000570 <__mulsf3x>:
 570:	c6 df       	rcall	.-116    	; 0x4fe <__fp_split3>
 572:	a0 f3       	brcs	.-24     	; 0x55c <__mulsf3+0x4>

00000574 <__mulsf3_pse>:
 574:	95 9f       	mul	r25, r21
 576:	d1 f3       	breq	.-12     	; 0x56c <__mulsf3+0x14>
 578:	95 0f       	add	r25, r21
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	55 1f       	adc	r21, r21
 57e:	62 9f       	mul	r22, r18
 580:	f0 01       	movw	r30, r0
 582:	72 9f       	mul	r23, r18
 584:	bb 27       	eor	r27, r27
 586:	f0 0d       	add	r31, r0
 588:	b1 1d       	adc	r27, r1
 58a:	63 9f       	mul	r22, r19
 58c:	aa 27       	eor	r26, r26
 58e:	f0 0d       	add	r31, r0
 590:	b1 1d       	adc	r27, r1
 592:	aa 1f       	adc	r26, r26
 594:	64 9f       	mul	r22, r20
 596:	66 27       	eor	r22, r22
 598:	b0 0d       	add	r27, r0
 59a:	a1 1d       	adc	r26, r1
 59c:	66 1f       	adc	r22, r22
 59e:	82 9f       	mul	r24, r18
 5a0:	22 27       	eor	r18, r18
 5a2:	b0 0d       	add	r27, r0
 5a4:	a1 1d       	adc	r26, r1
 5a6:	62 1f       	adc	r22, r18
 5a8:	73 9f       	mul	r23, r19
 5aa:	b0 0d       	add	r27, r0
 5ac:	a1 1d       	adc	r26, r1
 5ae:	62 1f       	adc	r22, r18
 5b0:	83 9f       	mul	r24, r19
 5b2:	a0 0d       	add	r26, r0
 5b4:	61 1d       	adc	r22, r1
 5b6:	22 1f       	adc	r18, r18
 5b8:	74 9f       	mul	r23, r20
 5ba:	33 27       	eor	r19, r19
 5bc:	a0 0d       	add	r26, r0
 5be:	61 1d       	adc	r22, r1
 5c0:	23 1f       	adc	r18, r19
 5c2:	84 9f       	mul	r24, r20
 5c4:	60 0d       	add	r22, r0
 5c6:	21 1d       	adc	r18, r1
 5c8:	82 2f       	mov	r24, r18
 5ca:	76 2f       	mov	r23, r22
 5cc:	6a 2f       	mov	r22, r26
 5ce:	11 24       	eor	r1, r1
 5d0:	9f 57       	subi	r25, 0x7F	; 127
 5d2:	50 40       	sbci	r21, 0x00	; 0
 5d4:	8a f0       	brmi	.+34     	; 0x5f8 <__mulsf3_pse+0x84>
 5d6:	e1 f0       	breq	.+56     	; 0x610 <__mulsf3_pse+0x9c>
 5d8:	88 23       	and	r24, r24
 5da:	4a f0       	brmi	.+18     	; 0x5ee <__mulsf3_pse+0x7a>
 5dc:	ee 0f       	add	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	bb 1f       	adc	r27, r27
 5e2:	66 1f       	adc	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	91 50       	subi	r25, 0x01	; 1
 5ea:	50 40       	sbci	r21, 0x00	; 0
 5ec:	a9 f7       	brne	.-22     	; 0x5d8 <__mulsf3_pse+0x64>
 5ee:	9e 3f       	cpi	r25, 0xFE	; 254
 5f0:	51 05       	cpc	r21, r1
 5f2:	70 f0       	brcs	.+28     	; 0x610 <__mulsf3_pse+0x9c>
 5f4:	14 c0       	rjmp	.+40     	; 0x61e <__fp_inf>
 5f6:	a6 cf       	rjmp	.-180    	; 0x544 <__fp_szero>
 5f8:	5f 3f       	cpi	r21, 0xFF	; 255
 5fa:	ec f3       	brlt	.-6      	; 0x5f6 <__mulsf3_pse+0x82>
 5fc:	98 3e       	cpi	r25, 0xE8	; 232
 5fe:	dc f3       	brlt	.-10     	; 0x5f6 <__mulsf3_pse+0x82>
 600:	86 95       	lsr	r24
 602:	77 95       	ror	r23
 604:	67 95       	ror	r22
 606:	b7 95       	ror	r27
 608:	f7 95       	ror	r31
 60a:	e7 95       	ror	r30
 60c:	9f 5f       	subi	r25, 0xFF	; 255
 60e:	c1 f7       	brne	.-16     	; 0x600 <__mulsf3_pse+0x8c>
 610:	fe 2b       	or	r31, r30
 612:	88 0f       	add	r24, r24
 614:	91 1d       	adc	r25, r1
 616:	96 95       	lsr	r25
 618:	87 95       	ror	r24
 61a:	97 f9       	bld	r25, 7
 61c:	08 95       	ret

0000061e <__fp_inf>:
 61e:	97 f9       	bld	r25, 7
 620:	9f 67       	ori	r25, 0x7F	; 127
 622:	80 e8       	ldi	r24, 0x80	; 128
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	08 95       	ret

0000062a <__fp_nan>:
 62a:	9f ef       	ldi	r25, 0xFF	; 255
 62c:	80 ec       	ldi	r24, 0xC0	; 192
 62e:	08 95       	ret

00000630 <__fp_pscA>:
 630:	00 24       	eor	r0, r0
 632:	0a 94       	dec	r0
 634:	16 16       	cp	r1, r22
 636:	17 06       	cpc	r1, r23
 638:	18 06       	cpc	r1, r24
 63a:	09 06       	cpc	r0, r25
 63c:	08 95       	ret

0000063e <__fp_pscB>:
 63e:	00 24       	eor	r0, r0
 640:	0a 94       	dec	r0
 642:	12 16       	cp	r1, r18
 644:	13 06       	cpc	r1, r19
 646:	14 06       	cpc	r1, r20
 648:	05 06       	cpc	r0, r21
 64a:	08 95       	ret

0000064c <__fp_round>:
 64c:	09 2e       	mov	r0, r25
 64e:	03 94       	inc	r0
 650:	00 0c       	add	r0, r0
 652:	11 f4       	brne	.+4      	; 0x658 <__fp_round+0xc>
 654:	88 23       	and	r24, r24
 656:	52 f0       	brmi	.+20     	; 0x66c <__fp_round+0x20>
 658:	bb 0f       	add	r27, r27
 65a:	40 f4       	brcc	.+16     	; 0x66c <__fp_round+0x20>
 65c:	bf 2b       	or	r27, r31
 65e:	11 f4       	brne	.+4      	; 0x664 <__fp_round+0x18>
 660:	60 ff       	sbrs	r22, 0
 662:	04 c0       	rjmp	.+8      	; 0x66c <__fp_round+0x20>
 664:	6f 5f       	subi	r22, 0xFF	; 255
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	8f 4f       	sbci	r24, 0xFF	; 255
 66a:	9f 4f       	sbci	r25, 0xFF	; 255
 66c:	08 95       	ret

0000066e <_exit>:
 66e:	f8 94       	cli

00000670 <__stop_program>:
 670:	ff cf       	rjmp	.-2      	; 0x670 <__stop_program>
