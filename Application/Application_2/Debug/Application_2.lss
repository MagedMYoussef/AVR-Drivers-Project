
Application_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000908  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000908  0000099c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080007c  0080007c  000009b8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000009b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00001110  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001551  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085f  00000000  00000000  00002801  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bce  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  00003c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000472  00000000  00000000  00003fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba6  00000000  00000000  00004422  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  8a:	0c 94 82 04 	jmp	0x904	; 0x904 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_7seg>:
 *  Author: maged
 */ 
#include "7-seg.h"
#include <util/delay.h>

uint8 init_7seg (SEG_CONFIG_t * object) {
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	ec 01       	movw	r28, r24
	uint8 i;
	if (object -> mode != DECODER && object -> mode != NO_DECODER)
  9a:	88 81       	ld	r24, Y
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	f0 f4       	brcc	.+60     	; 0xdc <init_7seg+0x4a>
		return FALSE;
		
	//for enables
	for (i = 0; i < object -> no_of_digits; i++) {
  a0:	8b 81       	ldd	r24, Y+3	; 0x03
  a2:	88 23       	and	r24, r24
  a4:	51 f0       	breq	.+20     	; 0xba <init_7seg+0x28>
  a6:	10 e0       	ldi	r17, 0x00	; 0
		init_pin(object -> control_port, i, OUTPUT);
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	61 2f       	mov	r22, r17
  ac:	41 e0       	ldi	r20, 0x01	; 1
  ae:	0e 94 17 01 	call	0x22e	; 0x22e <init_pin>
	uint8 i;
	if (object -> mode != DECODER && object -> mode != NO_DECODER)
		return FALSE;
		
	//for enables
	for (i = 0; i < object -> no_of_digits; i++) {
  b2:	1f 5f       	subi	r17, 0xFF	; 255
  b4:	8b 81       	ldd	r24, Y+3	; 0x03
  b6:	18 17       	cp	r17, r24
  b8:	b8 f3       	brcs	.-18     	; 0xa8 <init_7seg+0x16>
		init_pin(object -> control_port, i, OUTPUT);
	}
	
	//7-segment output initialization
	if(object -> mode == DECODER) {
  ba:	88 81       	ld	r24, Y
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	31 f4       	brne	.+12     	; 0xcc <init_7seg+0x3a>
		init_port(object -> data_port, 0x0F);
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	6f e0       	ldi	r22, 0x0F	; 15
  c4:	0e 94 0b 01 	call	0x216	; 0x216 <init_port>
	}
	else if (object -> mode == NO_DECODER) {
		init_port(object -> data_port, 0x7F);
	}
	return TRUE;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0b c0       	rjmp	.+22     	; 0xe2 <init_7seg+0x50>
	
	//7-segment output initialization
	if(object -> mode == DECODER) {
		init_port(object -> data_port, 0x0F);
	}
	else if (object -> mode == NO_DECODER) {
  cc:	88 23       	and	r24, r24
  ce:	41 f4       	brne	.+16     	; 0xe0 <init_7seg+0x4e>
		init_port(object -> data_port, 0x7F);
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	6f e7       	ldi	r22, 0x7F	; 127
  d4:	0e 94 0b 01 	call	0x216	; 0x216 <init_port>
	}
	return TRUE;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	03 c0       	rjmp	.+6      	; 0xe2 <init_7seg+0x50>
#include <util/delay.h>

uint8 init_7seg (SEG_CONFIG_t * object) {
	uint8 i;
	if (object -> mode != DECODER && object -> mode != NO_DECODER)
		return FALSE;
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	01 c0       	rjmp	.+2      	; 0xe2 <init_7seg+0x50>
		init_port(object -> data_port, 0x0F);
	}
	else if (object -> mode == NO_DECODER) {
		init_port(object -> data_port, 0x7F);
	}
	return TRUE;
  e0:	81 e0       	ldi	r24, 0x01	; 1
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	1f 91       	pop	r17
  e8:	08 95       	ret

000000ea <display>:
		write_port(object -> data_port, object -> digits_to_display[i]);
	}
	return TRUE;
}
*/
uint8 display(SEG_CONFIG_t * object, uint8 number) {
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	2a 97       	sbiw	r28, 0x0a	; 10
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
 108:	7c 01       	movw	r14, r24
 10a:	86 2f       	mov	r24, r22
	if(object -> mode == DECODER) {
 10c:	d7 01       	movw	r26, r14
 10e:	9c 91       	ld	r25, X
 110:	91 30       	cpi	r25, 0x01	; 1
 112:	09 f0       	breq	.+2      	; 0x116 <display+0x2c>
 114:	4c c0       	rjmp	.+152    	; 0x1ae <display+0xc4>
		uint8 i, j;
		uint8  digits_to_display [10];
		//****hexa calc
		for (i = 0; i < (object -> no_of_digits); i++) {
 116:	13 96       	adiw	r26, 0x03	; 3
 118:	4c 91       	ld	r20, X
 11a:	13 97       	sbiw	r26, 0x03	; 3
 11c:	44 23       	and	r20, r20
 11e:	09 f4       	brne	.+2      	; 0x122 <display+0x38>
 120:	46 c0       	rjmp	.+140    	; 0x1ae <display+0xc4>
 122:	9e 01       	movw	r18, r28
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	f9 01       	movw	r30, r18
			digits_to_display [i] = number % 10;
 12a:	5a e0       	ldi	r21, 0x0A	; 10
 12c:	65 2f       	mov	r22, r21
 12e:	0e 94 76 04 	call	0x8ec	; 0x8ec <__udivmodqi4>
 132:	91 93       	st	Z+, r25
uint8 display(SEG_CONFIG_t * object, uint8 number) {
	if(object -> mode == DECODER) {
		uint8 i, j;
		uint8  digits_to_display [10];
		//****hexa calc
		for (i = 0; i < (object -> no_of_digits); i++) {
 134:	9e 2f       	mov	r25, r30
 136:	92 1b       	sub	r25, r18
 138:	94 17       	cp	r25, r20
 13a:	c0 f3       	brcs	.-16     	; 0x12c <display+0x42>
			digits_to_display [i] = number % 10;
			number = number / 10;
		}
		//fe 7aga 3'alat hna 
		for (i = 0; i < object -> no_of_digits; i++) {
 13c:	f7 01       	movw	r30, r14
 13e:	83 81       	ldd	r24, Z+3	; 0x03
 140:	88 23       	and	r24, r24
 142:	a9 f1       	breq	.+106    	; 0x1ae <display+0xc4>
 144:	00 e0       	ldi	r16, 0x00	; 0
			write_pin(object -> control_port,i, 1);	//for enable
			//disable other displays
			for (j = 0; j < object -> no_of_digits; j++) {
 146:	dd 24       	eor	r13, r13
			digits_to_display [i] = number % 10;
			number = number / 10;
		}
		//fe 7aga 3'alat hna 
		for (i = 0; i < object -> no_of_digits; i++) {
			write_pin(object -> control_port,i, 1);	//for enable
 148:	d7 01       	movw	r26, r14
 14a:	12 96       	adiw	r26, 0x02	; 2
 14c:	8c 91       	ld	r24, X
 14e:	60 2f       	mov	r22, r16
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
			//disable other displays
			for (j = 0; j < object -> no_of_digits; j++) {
 156:	f7 01       	movw	r30, r14
 158:	83 81       	ldd	r24, Z+3	; 0x03
 15a:	88 23       	and	r24, r24
 15c:	79 f0       	breq	.+30     	; 0x17c <display+0x92>
 15e:	1d 2d       	mov	r17, r13
				if (i == j)
 160:	01 17       	cp	r16, r17
 162:	39 f0       	breq	.+14     	; 0x172 <display+0x88>
					continue;
				write_pin(object -> control_port,j, 0);
 164:	d7 01       	movw	r26, r14
 166:	12 96       	adiw	r26, 0x02	; 2
 168:	8c 91       	ld	r24, X
 16a:	61 2f       	mov	r22, r17
 16c:	4d 2d       	mov	r20, r13
 16e:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
		}
		//fe 7aga 3'alat hna 
		for (i = 0; i < object -> no_of_digits; i++) {
			write_pin(object -> control_port,i, 1);	//for enable
			//disable other displays
			for (j = 0; j < object -> no_of_digits; j++) {
 172:	1f 5f       	subi	r17, 0xFF	; 255
 174:	f7 01       	movw	r30, r14
 176:	83 81       	ldd	r24, Z+3	; 0x03
 178:	18 17       	cp	r17, r24
 17a:	90 f3       	brcs	.-28     	; 0x160 <display+0x76>
				if (i == j)
					continue;
				write_pin(object -> control_port,j, 0);
			}
			write_port(object -> data_port,digits_to_display[i]);
 17c:	e1 e0       	ldi	r30, 0x01	; 1
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	ec 0f       	add	r30, r28
 182:	fd 1f       	adc	r31, r29
 184:	e0 0f       	add	r30, r16
 186:	f1 1d       	adc	r31, r1
 188:	d7 01       	movw	r26, r14
 18a:	11 96       	adiw	r26, 0x01	; 1
 18c:	8c 91       	ld	r24, X
 18e:	60 81       	ld	r22, Z
 190:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	e7 ea       	ldi	r30, 0xA7	; 167
 196:	f1 e6       	ldi	r31, 0x61	; 97
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <display+0xae>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <display+0xb4>
 19e:	00 00       	nop
		for (i = 0; i < (object -> no_of_digits); i++) {
			digits_to_display [i] = number % 10;
			number = number / 10;
		}
		//fe 7aga 3'alat hna 
		for (i = 0; i < object -> no_of_digits; i++) {
 1a0:	0f 5f       	subi	r16, 0xFF	; 255
 1a2:	d7 01       	movw	r26, r14
 1a4:	13 96       	adiw	r26, 0x03	; 3
 1a6:	8c 91       	ld	r24, X
 1a8:	13 97       	sbiw	r26, 0x03	; 3
 1aa:	08 17       	cp	r16, r24
 1ac:	68 f2       	brcs	.-102    	; 0x148 <display+0x5e>
		}
		else if (object -> type == COMMONANODE) {
		}
	}
	return TRUE;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	2a 96       	adiw	r28, 0x0a	; 10
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	08 95       	ret

000001cc <main>:
 * Description : Hello World in C, Ansi-style
 */

#include "application_2.h"

int main(void) {
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	2b 97       	sbiw	r28, 0x0b	; 11
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	de bf       	out	0x3e, r29	; 62
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	cd bf       	out	0x3d, r28	; 61
	USART_CONFIG_t usart_comm = {
 1e0:	de 01       	movw	r26, r28
 1e2:	11 96       	adiw	r26, 0x01	; 1
 1e4:	e0 e6       	ldi	r30, 0x60	; 96
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	8b e0       	ldi	r24, 0x0B	; 11
 1ea:	01 90       	ld	r0, Z+
 1ec:	0d 92       	st	X+, r0
 1ee:	81 50       	subi	r24, 0x01	; 1
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0x1e>
		'8',
		RISING_TRANSMIT,
		DIS_DOUBLE_TX,
		SINGLEPROCESSOR
	};
	USART_init(&usart_comm);
 1f2:	ce 01       	movw	r24, r28
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	0e 94 ac 03 	call	0x758	; 0x758 <USART_init>
 1fa:	8f e9       	ldi	r24, 0x9F	; 159
 1fc:	96 e8       	ldi	r25, 0x86	; 134
 1fe:	a1 e0       	ldi	r26, 0x01	; 1
 200:	81 50       	subi	r24, 0x01	; 1
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	a0 40       	sbci	r26, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x34>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x3e>
 20a:	00 00       	nop
	while (1) {
		_delay_ms(500);
		USART_recieve(&usart_comm);
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	0e 94 75 04 	call	0x8ea	; 0x8ea <USART_recieve>
 214:	f2 cf       	rjmp	.-28     	; 0x1fa <main+0x2e>

00000216 <init_port>:
 */

#include "gpio.h"

uint8 init_port(uint8 reg, uint8 val) {
	*(volatile uint8*) (reg + DIR_OFFSET) |= val;
 216:	e8 2f       	mov	r30, r24
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	81 81       	ldd	r24, Z+1	; 0x01
 21c:	68 2b       	or	r22, r24
 21e:	61 83       	std	Z+1, r22	; 0x01
	return TRUE;
}
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	08 95       	ret

00000224 <write_port>:

uint8 write_port(uint8 reg, uint8 val) {
	*(volatile uint8*) (reg + OUT_OFFSET) = val;
 224:	e8 2f       	mov	r30, r24
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	62 83       	std	Z+2, r22	; 0x02
	return TRUE;
}
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	08 95       	ret

0000022e <init_pin>:

uint8 init_pin(uint8 reg, uint8 pin_no, uint8 val) {
	if (0 != val && 1 != val)
 22e:	42 30       	cpi	r20, 0x02	; 2
 230:	18 f5       	brcc	.+70     	; 0x278 <init_pin+0x4a>
		return FALSE;

	if (val)
 232:	44 23       	and	r20, r20
 234:	81 f0       	breq	.+32     	; 0x256 <init_pin+0x28>
		*(volatile uint8*) (reg + DIR_OFFSET) |= 1 << pin_no;
 236:	e8 2f       	mov	r30, r24
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	21 81       	ldd	r18, Z+1	; 0x01
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <init_pin+0x1a>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <init_pin+0x16>
 24c:	ba 01       	movw	r22, r20
 24e:	62 2b       	or	r22, r18
 250:	61 83       	std	Z+1, r22	; 0x01
	else if (!val)
		*(volatile uint8*) (reg + DIR_OFFSET) &= ~(1 << pin_no);

	return TRUE;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	08 95       	ret
		return FALSE;

	if (val)
		*(volatile uint8*) (reg + DIR_OFFSET) |= 1 << pin_no;
	else if (!val)
		*(volatile uint8*) (reg + DIR_OFFSET) &= ~(1 << pin_no);
 256:	e8 2f       	mov	r30, r24
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	21 81       	ldd	r18, Z+1	; 0x01
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	ac 01       	movw	r20, r24
 262:	02 c0       	rjmp	.+4      	; 0x268 <init_pin+0x3a>
 264:	44 0f       	add	r20, r20
 266:	55 1f       	adc	r21, r21
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <init_pin+0x36>
 26c:	ba 01       	movw	r22, r20
 26e:	60 95       	com	r22
 270:	62 23       	and	r22, r18
 272:	61 83       	std	Z+1, r22	; 0x01

	return TRUE;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	08 95       	ret
	return TRUE;
}

uint8 init_pin(uint8 reg, uint8 pin_no, uint8 val) {
	if (0 != val && 1 != val)
		return FALSE;
 278:	80 e0       	ldi	r24, 0x00	; 0
		*(volatile uint8*) (reg + DIR_OFFSET) |= 1 << pin_no;
	else if (!val)
		*(volatile uint8*) (reg + DIR_OFFSET) &= ~(1 << pin_no);

	return TRUE;
}
 27a:	08 95       	ret

0000027c <write_pin>:

uint8 write_pin(uint8 reg, uint8 pin_no, uint8 val) {
	if (0 != val && 1 != val)
 27c:	42 30       	cpi	r20, 0x02	; 2
 27e:	18 f5       	brcc	.+70     	; 0x2c6 <write_pin+0x4a>
		return FALSE;

	if (val)
 280:	44 23       	and	r20, r20
 282:	81 f0       	breq	.+32     	; 0x2a4 <write_pin+0x28>
		*(volatile uint8*) (reg + OUT_OFFSET) |= 1 << pin_no;
 284:	e8 2f       	mov	r30, r24
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	22 81       	ldd	r18, Z+2	; 0x02
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	ac 01       	movw	r20, r24
 290:	02 c0       	rjmp	.+4      	; 0x296 <write_pin+0x1a>
 292:	44 0f       	add	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <write_pin+0x16>
 29a:	ba 01       	movw	r22, r20
 29c:	62 2b       	or	r22, r18
 29e:	62 83       	std	Z+2, r22	; 0x02
	else if (!val)
		*(volatile uint8*) (reg + OUT_OFFSET) &= ~(1 << pin_no);

	return TRUE;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	08 95       	ret
		return FALSE;

	if (val)
		*(volatile uint8*) (reg + OUT_OFFSET) |= 1 << pin_no;
	else if (!val)
		*(volatile uint8*) (reg + OUT_OFFSET) &= ~(1 << pin_no);
 2a4:	e8 2f       	mov	r30, r24
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	22 81       	ldd	r18, Z+2	; 0x02
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	ac 01       	movw	r20, r24
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <write_pin+0x3a>
 2b2:	44 0f       	add	r20, r20
 2b4:	55 1f       	adc	r21, r21
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <write_pin+0x36>
 2ba:	ba 01       	movw	r22, r20
 2bc:	60 95       	com	r22
 2be:	62 23       	and	r22, r18
 2c0:	62 83       	std	Z+2, r22	; 0x02

	return TRUE;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	08 95       	ret
	return TRUE;
}

uint8 write_pin(uint8 reg, uint8 pin_no, uint8 val) {
	if (0 != val && 1 != val)
		return FALSE;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
		*(volatile uint8*) (reg + OUT_OFFSET) |= 1 << pin_no;
	else if (!val)
		*(volatile uint8*) (reg + OUT_OFFSET) &= ~(1 << pin_no);

	return TRUE;
}
 2c8:	08 95       	ret

000002ca <read_pin>:

uint8 read_pin(uint8 reg, uint8 pin_no) {

	uint8 val = *(volatile uint8*) (reg + INPUT_OFFSET) & 1 << pin_no;
 2ca:	e8 2f       	mov	r30, r24
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	20 81       	ld	r18, Z
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	ac 01       	movw	r20, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <read_pin+0x12>
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <read_pin+0xe>
 2e0:	ba 01       	movw	r22, r20
 2e2:	62 23       	and	r22, r18
	if (val)
		return 1;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	09 f4       	brne	.+2      	; 0x2ea <read_pin+0x20>
 2e8:	80 e0       	ldi	r24, 0x00	; 0

	return 0;
}
 2ea:	08 95       	ret

000002ec <init_Pad>:
#include <util/delay.h>

static uint8 row, column, flag = 1;

uint8 init_Pad(KeyPad_t *object)
{
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	ec 01       	movw	r28, r24
	init_port(object -> data_port, 0x0F);
 2f2:	88 81       	ld	r24, Y
 2f4:	6f e0       	ldi	r22, 0x0F	; 15
 2f6:	0e 94 0b 01 	call	0x216	; 0x216 <init_port>
	write_port(object -> data_port, 0xFF);
 2fa:	88 81       	ld	r24, Y
 2fc:	6f ef       	ldi	r22, 0xFF	; 255
 2fe:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
	return TRUE;
}
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <read_button>:

uint8 read_button(KeyPad_t *object)
{	
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	ec 01       	movw	r28, r24
	write_port(object ->data_port , 0xFF);
 310:	88 81       	ld	r24, Y
 312:	6f ef       	ldi	r22, 0xFF	; 255
 314:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
	//generating sequence
	for(row = 0; row < row_nums; row++)
 318:	10 92 7c 00 	sts	0x007C, r1
 31c:	60 e0       	ldi	r22, 0x00	; 0
	{
		write_pin(object -> data_port, (row), 0);
 31e:	88 81       	ld	r24, Y
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
		for(column = 0; column < column_num; column++)
 326:	10 92 7d 00 	sts	0x007D, r1
 32a:	60 e0       	ldi	r22, 0x00	; 0
		{
			flag = read_pin(object -> data_port, (column+4));
 32c:	6c 5f       	subi	r22, 0xFC	; 252
 32e:	88 81       	ld	r24, Y
 330:	0e 94 65 01 	call	0x2ca	; 0x2ca <read_pin>
 334:	80 93 6b 00 	sts	0x006B, r24
			if (!flag)
 338:	88 23       	and	r24, r24
 33a:	49 f0       	breq	.+18     	; 0x34e <read_button+0x44>
	write_port(object ->data_port , 0xFF);
	//generating sequence
	for(row = 0; row < row_nums; row++)
	{
		write_pin(object -> data_port, (row), 0);
		for(column = 0; column < column_num; column++)
 33c:	60 91 7d 00 	lds	r22, 0x007D
 340:	6f 5f       	subi	r22, 0xFF	; 255
 342:	60 93 7d 00 	sts	0x007D, r22
 346:	64 30       	cpi	r22, 0x04	; 4
 348:	88 f3       	brcs	.-30     	; 0x32c <read_button+0x22>
		{
			flag = read_pin(object -> data_port, (column+4));
			if (!flag)
				break;
		}
		if(!flag) {
 34a:	88 23       	and	r24, r24
 34c:	21 f4       	brne	.+8      	; 0x356 <read_button+0x4c>
			flag = 1;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 6b 00 	sts	0x006B, r24
			break;
 354:	0d c0       	rjmp	.+26     	; 0x370 <read_button+0x66>
		}	
		write_pin(object ->data_port, (row), 1);
 356:	88 81       	ld	r24, Y
 358:	60 91 7c 00 	lds	r22, 0x007C
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>

uint8 read_button(KeyPad_t *object)
{	
	write_port(object ->data_port , 0xFF);
	//generating sequence
	for(row = 0; row < row_nums; row++)
 362:	60 91 7c 00 	lds	r22, 0x007C
 366:	6f 5f       	subi	r22, 0xFF	; 255
 368:	60 93 7c 00 	sts	0x007C, r22
 36c:	64 30       	cpi	r22, 0x04	; 4
 36e:	b8 f2       	brcs	.-82     	; 0x31e <read_button+0x14>
 370:	8b e4       	ldi	r24, 0x4B	; 75
 372:	9d e1       	ldi	r25, 0x1D	; 29
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <read_button+0x6a>
 378:	00 c0       	rjmp	.+0      	; 0x37a <read_button+0x70>
 37a:	00 00       	nop
			break;
		}	
		write_pin(object ->data_port, (row), 1);
	}
	_delay_ms(30);
	return digits[row][column];
 37c:	e0 91 7c 00 	lds	r30, 0x007C
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 91 7d 00 	lds	r24, 0x007D
 386:	ee 0f       	add	r30, r30
 388:	ff 1f       	adc	r31, r31
 38a:	ee 0f       	add	r30, r30
 38c:	ff 1f       	adc	r31, r31
 38e:	e8 0f       	add	r30, r24
 390:	f1 1d       	adc	r31, r1
 392:	e4 59       	subi	r30, 0x94	; 148
 394:	ff 4f       	sbci	r31, 0xFF	; 255
}
 396:	80 81       	ld	r24, Z
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <send_command>:
 */ 

#include "lcd.h"
#include <util/delay.h>

uint8 send_command(LCD_CONFIG_t * object, uint8 command) {
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	ec 01       	movw	r28, r24
 3a6:	16 2f       	mov	r17, r22
	write_pin(object -> command_port, object ->RS, 0);
 3a8:	88 81       	ld	r24, Y
 3aa:	6b 81       	ldd	r22, Y+3	; 0x03
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
	write_pin(object ->command_port, object -> RW, 0);
 3b2:	88 81       	ld	r24, Y
 3b4:	6c 81       	ldd	r22, Y+4	; 0x04
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
	
	write_port(object ->data_port, command);
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	61 2f       	mov	r22, r17
 3c0:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
	
	//latching from high to low -- data must be sent before latching
	write_pin(object ->command_port, object -> EN, 0);
 3c4:	88 81       	ld	r24, Y
 3c6:	6d 81       	ldd	r22, Y+5	; 0x05
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ce:	83 e0       	ldi	r24, 0x03	; 3
 3d0:	8a 95       	dec	r24
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <send_command+0x32>
 3d4:	00 00       	nop
	_delay_us(10);
	write_pin(object ->command_port, object -> EN, 1);
 3d6:	88 81       	ld	r24, Y
 3d8:	6d 81       	ldd	r22, Y+5	; 0x05
 3da:	41 e0       	ldi	r20, 0x01	; 1
 3dc:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
 3e0:	91 e2       	ldi	r25, 0x21	; 33
 3e2:	9a 95       	dec	r25
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <send_command+0x44>
 3e6:	00 00       	nop
	_delay_us(100);
	
	if (command == 0x01 || command == 0x02) {
 3e8:	11 50       	subi	r17, 0x01	; 1
 3ea:	12 30       	cpi	r17, 0x02	; 2
 3ec:	38 f4       	brcc	.+14     	; 0x3fc <send_command+0x5e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ee:	83 ef       	ldi	r24, 0xF3	; 243
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <send_command+0x54>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <send_command+0x5a>
 3f8:	00 00       	nop
		_delay_ms(2);
		return TRUE;
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <send_command+0x66>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fc:	90 e1       	ldi	r25, 0x10	; 16
 3fe:	9a 95       	dec	r25
 400:	f1 f7       	brne	.-4      	; 0x3fe <send_command+0x60>
 402:	00 c0       	rjmp	.+0      	; 0x404 <send_command+0x66>
	}
	
	_delay_us(50);
	return TRUE;
}
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	08 95       	ret

0000040e <send_char>:

uint8 send_char(LCD_CONFIG_t * object, uint8 data) {
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	ec 01       	movw	r28, r24
 416:	16 2f       	mov	r17, r22
	write_pin(object -> command_port, object ->RS, 1);
 418:	88 81       	ld	r24, Y
 41a:	6b 81       	ldd	r22, Y+3	; 0x03
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
	write_pin(object ->command_port, object -> RW, 0);
 422:	88 81       	ld	r24, Y
 424:	6c 81       	ldd	r22, Y+4	; 0x04
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
	
	write_port(object ->data_port, data);
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	61 2f       	mov	r22, r17
 430:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
	
	//latching from high to low -- data must be sent before latching	
	write_pin(object ->command_port, object -> EN, 0);
 434:	88 81       	ld	r24, Y
 436:	6d 81       	ldd	r22, Y+5	; 0x05
 438:	40 e0       	ldi	r20, 0x00	; 0
 43a:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	8a 95       	dec	r24
 442:	f1 f7       	brne	.-4      	; 0x440 <send_char+0x32>
 444:	00 00       	nop
	_delay_us(10);
	write_pin(object ->command_port, object -> EN, 1);
 446:	88 81       	ld	r24, Y
 448:	6d 81       	ldd	r22, Y+5	; 0x05
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
 450:	81 e2       	ldi	r24, 0x21	; 33
 452:	8a 95       	dec	r24
 454:	f1 f7       	brne	.-4      	; 0x452 <send_char+0x44>
 456:	00 00       	nop
	_delay_us(100);
	return TRUE;
}
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	08 95       	ret

00000462 <send_string>:

uint8 send_string(LCD_CONFIG_t * object, uint8 * str, uint8 length) {
 462:	ef 92       	push	r14
 464:	ff 92       	push	r15
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	8c 01       	movw	r16, r24
 470:	d4 2f       	mov	r29, r20
	uint8 i;
	for (i = 0; i < length; i++) {
 472:	44 23       	and	r20, r20
 474:	b1 f0       	breq	.+44     	; 0x4a2 <send_string+0x40>
 476:	e6 2e       	mov	r14, r22
 478:	f7 2e       	mov	r15, r23
 47a:	c0 e0       	ldi	r28, 0x00	; 0
		send_char(object, *(str + i));
 47c:	f7 01       	movw	r30, r14
 47e:	61 91       	ld	r22, Z+
 480:	7f 01       	movw	r14, r30
 482:	c8 01       	movw	r24, r16
 484:	0e 94 07 02 	call	0x40e	; 0x40e <send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 488:	87 ea       	ldi	r24, 0xA7	; 167
 48a:	91 e6       	ldi	r25, 0x61	; 97
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <send_string+0x2a>
 490:	00 c0       	rjmp	.+0      	; 0x492 <send_string+0x30>
 492:	00 00       	nop
		_delay_ms(100);
		send_command(object, 0x14);
 494:	c8 01       	movw	r24, r16
 496:	64 e1       	ldi	r22, 0x14	; 20
 498:	0e 94 cf 01 	call	0x39e	; 0x39e <send_command>
	return TRUE;
}

uint8 send_string(LCD_CONFIG_t * object, uint8 * str, uint8 length) {
	uint8 i;
	for (i = 0; i < length; i++) {
 49c:	cf 5f       	subi	r28, 0xFF	; 255
 49e:	cd 17       	cp	r28, r29
 4a0:	69 f7       	brne	.-38     	; 0x47c <send_string+0x1a>
		send_char(object, *(str + i));
		_delay_ms(100);
		send_command(object, 0x14);
	}
	return TRUE;
}
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	0f 91       	pop	r16
 4ac:	ff 90       	pop	r15
 4ae:	ef 90       	pop	r14
 4b0:	08 95       	ret

000004b2 <init_lcd>:

uint8 init_lcd(LCD_CONFIG_t * object) {
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b8:	85 e0       	ldi	r24, 0x05	; 5
 4ba:	8a 95       	dec	r24
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <init_lcd+0x8>
	_delay_us(15);
	
	init_port(object ->command_port, 0xFF);
 4be:	88 81       	ld	r24, Y
 4c0:	6f ef       	ldi	r22, 0xFF	; 255
 4c2:	0e 94 0b 01 	call	0x216	; 0x216 <init_port>
	init_port(object ->data_port, 0xFF);
 4c6:	89 81       	ldd	r24, Y+1	; 0x01
 4c8:	6f ef       	ldi	r22, 0xFF	; 255
 4ca:	0e 94 0b 01 	call	0x216	; 0x216 <init_port>
	send_command(object, 0x38);
 4ce:	ce 01       	movw	r24, r28
 4d0:	68 e3       	ldi	r22, 0x38	; 56
 4d2:	0e 94 cf 01 	call	0x39e	; 0x39e <send_command>
	send_command(object, 0x0E);
 4d6:	ce 01       	movw	r24, r28
 4d8:	6e e0       	ldi	r22, 0x0E	; 14
 4da:	0e 94 cf 01 	call	0x39e	; 0x39e <send_command>
	send_command(object, 0x01);
 4de:	ce 01       	movw	r24, r28
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	0e 94 cf 01 	call	0x39e	; 0x39e <send_command>
	
	return TRUE;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <init_led>:
 */

#include "led.h"

uint8 init_led (uint8 reg, uint8 pin_no) {
	init_pin (reg, pin_no, OUTPUT);
 4ee:	41 e0       	ldi	r20, 0x01	; 1
 4f0:	0e 94 17 01 	call	0x22e	; 0x22e <init_pin>
	return TRUE;
}
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	08 95       	ret

000004f8 <led_on>:

uint8 led_on (uint8 reg, uint8 pin_no) {
	write_pin(reg, pin_no, 1);
 4f8:	41 e0       	ldi	r20, 0x01	; 1
 4fa:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
	return TRUE;
}
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	08 95       	ret

00000502 <led_off>:

uint8 led_off (uint8 reg, uint8 pin_no) {
	write_pin(reg, pin_no, 0);
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
	return TRUE;
}
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	08 95       	ret

0000050c <led_toggle>:

uint8 led_toggle (uint8 reg, uint8 pin_no) {
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	d8 2f       	mov	r29, r24
 512:	c6 2f       	mov	r28, r22
	if (read_pin(reg, pin_no))
 514:	0e 94 65 01 	call	0x2ca	; 0x2ca <read_pin>
 518:	88 23       	and	r24, r24
 51a:	29 f0       	breq	.+10     	; 0x526 <led_toggle+0x1a>
		led_off(reg, pin_no);
 51c:	8d 2f       	mov	r24, r29
 51e:	6c 2f       	mov	r22, r28
 520:	0e 94 81 02 	call	0x502	; 0x502 <led_off>
 524:	0a c0       	rjmp	.+20     	; 0x53a <led_toggle+0x2e>
	else if (!read_pin(reg, pin_no))
 526:	8d 2f       	mov	r24, r29
 528:	6c 2f       	mov	r22, r28
 52a:	0e 94 65 01 	call	0x2ca	; 0x2ca <read_pin>
 52e:	88 23       	and	r24, r24
 530:	21 f4       	brne	.+8      	; 0x53a <led_toggle+0x2e>
		led_on(reg, pin_no);
 532:	8d 2f       	mov	r24, r29
 534:	6c 2f       	mov	r22, r28
 536:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <led_on>
	return TRUE;
}
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <initialize_7seg>:
 */ 

#include "simple_7seg.h"

uint8 initialize_7seg(Seven_SegConfig_t *object)
{
 542:	ef 92       	push	r14
 544:	ff 92       	push	r15
 546:	0f 93       	push	r16
 548:	1f 93       	push	r17
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	7c 01       	movw	r14, r24
	//initializing data port
	uint8 count;
	if (object -> mode == DECODER) {
 550:	fc 01       	movw	r30, r24
 552:	80 81       	ld	r24, Z
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	79 f4       	brne	.+30     	; 0x576 <initialize_7seg+0x34>
 *  Author: fadyf
 */ 

#include "simple_7seg.h"

uint8 initialize_7seg(Seven_SegConfig_t *object)
 558:	e7 01       	movw	r28, r14
 55a:	22 96       	adiw	r28, 0x02	; 2
 55c:	87 01       	movw	r16, r14
 55e:	0a 5f       	subi	r16, 0xFA	; 250
 560:	1f 4f       	sbci	r17, 0xFF	; 255
{
	//initializing data port
	uint8 count;
	if (object -> mode == DECODER) {
		for (count = 0; count < 4; count++)   //there is only 4 pins
			init_pin(object -> data_port, object -> data_pins[count], OUTPUT);
 562:	69 91       	ld	r22, Y+
 564:	f7 01       	movw	r30, r14
 566:	81 81       	ldd	r24, Z+1	; 0x01
 568:	41 e0       	ldi	r20, 0x01	; 1
 56a:	0e 94 17 01 	call	0x22e	; 0x22e <init_pin>
uint8 initialize_7seg(Seven_SegConfig_t *object)
{
	//initializing data port
	uint8 count;
	if (object -> mode == DECODER) {
		for (count = 0; count < 4; count++)   //there is only 4 pins
 56e:	c0 17       	cp	r28, r16
 570:	d1 07       	cpc	r29, r17
 572:	b9 f7       	brne	.-18     	; 0x562 <initialize_7seg+0x20>
 574:	10 c0       	rjmp	.+32     	; 0x596 <initialize_7seg+0x54>
			init_pin(object -> data_port, object -> data_pins[count], OUTPUT);
	}
	else if (object -> mode == NO_DECODER){
 576:	88 23       	and	r24, r24
 578:	71 f4       	brne	.+28     	; 0x596 <initialize_7seg+0x54>
 *  Author: fadyf
 */ 

#include "simple_7seg.h"

uint8 initialize_7seg(Seven_SegConfig_t *object)
 57a:	e7 01       	movw	r28, r14
 57c:	22 96       	adiw	r28, 0x02	; 2
 57e:	87 01       	movw	r16, r14
 580:	07 5f       	subi	r16, 0xF7	; 247
 582:	1f 4f       	sbci	r17, 0xFF	; 255
		for (count = 0; count < 4; count++)   //there is only 4 pins
			init_pin(object -> data_port, object -> data_pins[count], OUTPUT);
	}
	else if (object -> mode == NO_DECODER){
		for (count = 0; count < 7; count++)
			init_pin(object -> data_port, object -> data_pins[count], OUTPUT);
 584:	69 91       	ld	r22, Y+
 586:	f7 01       	movw	r30, r14
 588:	81 81       	ldd	r24, Z+1	; 0x01
 58a:	41 e0       	ldi	r20, 0x01	; 1
 58c:	0e 94 17 01 	call	0x22e	; 0x22e <init_pin>
	if (object -> mode == DECODER) {
		for (count = 0; count < 4; count++)   //there is only 4 pins
			init_pin(object -> data_port, object -> data_pins[count], OUTPUT);
	}
	else if (object -> mode == NO_DECODER){
		for (count = 0; count < 7; count++)
 590:	c0 17       	cp	r28, r16
 592:	d1 07       	cpc	r29, r17
 594:	b9 f7       	brne	.-18     	; 0x584 <initialize_7seg+0x42>
			init_pin(object -> data_port, object -> data_pins[count], OUTPUT);
	}
	
	//initializing data pins
	init_pin(object -> control_port, object -> control_pin, OUTPUT);
 596:	f7 01       	movw	r30, r14
 598:	81 85       	ldd	r24, Z+9	; 0x09
 59a:	62 85       	ldd	r22, Z+10	; 0x0a
 59c:	41 e0       	ldi	r20, 0x01	; 1
 59e:	0e 94 17 01 	call	0x22e	; 0x22e <init_pin>
	return TRUE;	 
}
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	0f 91       	pop	r16
 5ac:	ff 90       	pop	r15
 5ae:	ef 90       	pop	r14
 5b0:	08 95       	ret

000005b2 <display_digit>:

uint8 display_digit(Seven_SegConfig_t *object,const uint8 digit)
{
 5b2:	cf 92       	push	r12
 5b4:	df 92       	push	r13
 5b6:	ef 92       	push	r14
 5b8:	ff 92       	push	r15
 5ba:	0f 93       	push	r16
 5bc:	1f 93       	push	r17
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	8c 01       	movw	r16, r24
 5c4:	c6 2f       	mov	r28, r22
	uint8 count, temp;   // temp is declared to mask some bits
	
	if(object -> mode == DECODER) {
 5c6:	fc 01       	movw	r30, r24
 5c8:	80 81       	ld	r24, Z
 5ca:	81 30       	cpi	r24, 0x01	; 1
 5cc:	39 f5       	brne	.+78     	; 0x61c <display_digit+0x6a>
		
		//writing control pin
		write_pin(object ->control_port, object -> control_pin, 1);
 5ce:	81 85       	ldd	r24, Z+9	; 0x09
 5d0:	62 85       	ldd	r22, Z+10	; 0x0a
 5d2:	41 e0       	ldi	r20, 0x01	; 1
 5d4:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
	//initializing data pins
	init_pin(object -> control_port, object -> control_pin, OUTPUT);
	return TRUE;	 
}

uint8 display_digit(Seven_SegConfig_t *object,const uint8 digit)
 5d8:	cc 24       	eor	r12, r12
 5da:	dd 24       	eor	r13, r13
 5dc:	68 94       	set
 5de:	c1 f8       	bld	r12, 1
 5e0:	c0 0e       	add	r12, r16
 5e2:	d1 1e       	adc	r13, r17
 5e4:	ee 24       	eor	r14, r14
 5e6:	ff 24       	eor	r15, r15
		
		//writing control pin
		write_pin(object ->control_port, object -> control_pin, 1);
		
		//writing data pins
		temp = 0x01;   
 5e8:	d1 e0       	ldi	r29, 0x01	; 1
		for(count = 0; count < 4; count++) {
			write_pin(object -> data_port, object -> data_pins[count],(digit & temp) >> count);   //to write each pin individually
 5ea:	f6 01       	movw	r30, r12
 5ec:	61 91       	ld	r22, Z+
 5ee:	6f 01       	movw	r12, r30
 5f0:	4d 2f       	mov	r20, r29
 5f2:	4c 23       	and	r20, r28
 5f4:	50 e0       	ldi	r21, 0x00	; 0
 5f6:	0e 2c       	mov	r0, r14
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <display_digit+0x4c>
 5fa:	55 95       	asr	r21
 5fc:	47 95       	ror	r20
 5fe:	0a 94       	dec	r0
 600:	e2 f7       	brpl	.-8      	; 0x5fa <display_digit+0x48>
 602:	f8 01       	movw	r30, r16
 604:	81 81       	ldd	r24, Z+1	; 0x01
 606:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
			temp = temp << 1;
 60a:	dd 0f       	add	r29, r29
 60c:	08 94       	sec
 60e:	e1 1c       	adc	r14, r1
 610:	f1 1c       	adc	r15, r1
		//writing control pin
		write_pin(object ->control_port, object -> control_pin, 1);
		
		//writing data pins
		temp = 0x01;   
		for(count = 0; count < 4; count++) {
 612:	f4 e0       	ldi	r31, 0x04	; 4
 614:	ef 16       	cp	r14, r31
 616:	f1 04       	cpc	r15, r1
 618:	41 f7       	brne	.-48     	; 0x5ea <display_digit+0x38>
 61a:	6b c0       	rjmp	.+214    	; 0x6f2 <display_digit+0x140>
			write_pin(object -> data_port, object -> data_pins[count],(digit & temp) >> count);   //to write each pin individually
			temp = temp << 1;
		}		
	}
	
	else if(object -> mode == NO_DECODER) {
 61c:	88 23       	and	r24, r24
 61e:	09 f0       	breq	.+2      	; 0x622 <display_digit+0x70>
 620:	68 c0       	rjmp	.+208    	; 0x6f2 <display_digit+0x140>
	return TRUE;	
}

static void write_it(Seven_SegConfig_t *object, uint8 number)
{
	switch (number) {
 622:	64 30       	cpi	r22, 0x04	; 4
 624:	99 f1       	breq	.+102    	; 0x68c <display_digit+0xda>
 626:	65 30       	cpi	r22, 0x05	; 5
 628:	50 f4       	brcc	.+20     	; 0x63e <display_digit+0x8c>
 62a:	61 30       	cpi	r22, 0x01	; 1
 62c:	e9 f0       	breq	.+58     	; 0x668 <display_digit+0xb6>
 62e:	61 30       	cpi	r22, 0x01	; 1
 630:	a8 f0       	brcs	.+42     	; 0x65c <display_digit+0xaa>
 632:	62 30       	cpi	r22, 0x02	; 2
 634:	f9 f0       	breq	.+62     	; 0x674 <display_digit+0xc2>
 636:	63 30       	cpi	r22, 0x03	; 3
 638:	09 f0       	breq	.+2      	; 0x63c <display_digit+0x8a>
 63a:	4b c0       	rjmp	.+150    	; 0x6d2 <display_digit+0x120>
 63c:	21 c0       	rjmp	.+66     	; 0x680 <display_digit+0xce>
 63e:	67 30       	cpi	r22, 0x07	; 7
 640:	b9 f1       	breq	.+110    	; 0x6b0 <display_digit+0xfe>
 642:	68 30       	cpi	r22, 0x08	; 8
 644:	30 f4       	brcc	.+12     	; 0x652 <display_digit+0xa0>
 646:	65 30       	cpi	r22, 0x05	; 5
 648:	39 f1       	breq	.+78     	; 0x698 <display_digit+0xe6>
 64a:	66 30       	cpi	r22, 0x06	; 6
 64c:	09 f0       	breq	.+2      	; 0x650 <display_digit+0x9e>
 64e:	41 c0       	rjmp	.+130    	; 0x6d2 <display_digit+0x120>
 650:	29 c0       	rjmp	.+82     	; 0x6a4 <display_digit+0xf2>
 652:	68 30       	cpi	r22, 0x08	; 8
 654:	99 f1       	breq	.+102    	; 0x6bc <display_digit+0x10a>
 656:	69 30       	cpi	r22, 0x09	; 9
 658:	e1 f5       	brne	.+120    	; 0x6d2 <display_digit+0x120>
 65a:	36 c0       	rjmp	.+108    	; 0x6c8 <display_digit+0x116>
		case 0 :
			write_port(object -> data_port, digit[0]);
 65c:	f8 01       	movw	r30, r16
 65e:	81 81       	ldd	r24, Z+1	; 0x01
 660:	6e e7       	ldi	r22, 0x7E	; 126
 662:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
 666:	35 c0       	rjmp	.+106    	; 0x6d2 <display_digit+0x120>
			break;
		case 1 :
			write_port(object -> data_port, digit[1]);
 668:	f8 01       	movw	r30, r16
 66a:	81 81       	ldd	r24, Z+1	; 0x01
 66c:	60 e3       	ldi	r22, 0x30	; 48
 66e:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
 672:	2f c0       	rjmp	.+94     	; 0x6d2 <display_digit+0x120>
			break;
		case 2 :
			write_port(object -> data_port, digit[2]);
 674:	f8 01       	movw	r30, r16
 676:	81 81       	ldd	r24, Z+1	; 0x01
 678:	6d e6       	ldi	r22, 0x6D	; 109
 67a:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
 67e:	29 c0       	rjmp	.+82     	; 0x6d2 <display_digit+0x120>
			break;
		case 3 :
			write_port(object -> data_port, digit[3]);
 680:	f8 01       	movw	r30, r16
 682:	81 81       	ldd	r24, Z+1	; 0x01
 684:	69 e7       	ldi	r22, 0x79	; 121
 686:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
 68a:	23 c0       	rjmp	.+70     	; 0x6d2 <display_digit+0x120>
			break;
		case 4 :
			write_port(object -> data_port, digit[4]);
 68c:	f8 01       	movw	r30, r16
 68e:	81 81       	ldd	r24, Z+1	; 0x01
 690:	63 e3       	ldi	r22, 0x33	; 51
 692:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
 696:	1d c0       	rjmp	.+58     	; 0x6d2 <display_digit+0x120>
			break;
		case 5 :
			write_port(object -> data_port, digit[5]);
 698:	f8 01       	movw	r30, r16
 69a:	81 81       	ldd	r24, Z+1	; 0x01
 69c:	6b e5       	ldi	r22, 0x5B	; 91
 69e:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
 6a2:	17 c0       	rjmp	.+46     	; 0x6d2 <display_digit+0x120>
			break;
		case 6 :
			write_port(object -> data_port, digit[6]);
 6a4:	f8 01       	movw	r30, r16
 6a6:	81 81       	ldd	r24, Z+1	; 0x01
 6a8:	6f e5       	ldi	r22, 0x5F	; 95
 6aa:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
 6ae:	11 c0       	rjmp	.+34     	; 0x6d2 <display_digit+0x120>
			break;
		case 7 :
			write_port(object -> data_port, digit[7]);
 6b0:	f8 01       	movw	r30, r16
 6b2:	81 81       	ldd	r24, Z+1	; 0x01
 6b4:	60 e7       	ldi	r22, 0x70	; 112
 6b6:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
 6ba:	0b c0       	rjmp	.+22     	; 0x6d2 <display_digit+0x120>
			break;
		case 8 :
			write_port(object -> data_port, digit[8]);
 6bc:	f8 01       	movw	r30, r16
 6be:	81 81       	ldd	r24, Z+1	; 0x01
 6c0:	6f e7       	ldi	r22, 0x7F	; 127
 6c2:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
 6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <display_digit+0x120>
			break;
		case 9 :
			write_port(object -> data_port, digit[9]);
 6c8:	f8 01       	movw	r30, r16
 6ca:	81 81       	ldd	r24, Z+1	; 0x01
 6cc:	6b e7       	ldi	r22, 0x7B	; 123
 6ce:	0e 94 12 01 	call	0x224	; 0x224 <write_port>
	
	else if(object -> mode == NO_DECODER) {
		write_it(object, digit);
		
		//writing enable pin
		if (object -> type == COMMONCATHODE)
 6d2:	f8 01       	movw	r30, r16
 6d4:	83 85       	ldd	r24, Z+11	; 0x0b
 6d6:	88 23       	and	r24, r24
 6d8:	31 f4       	brne	.+12     	; 0x6e6 <display_digit+0x134>
			write_pin(object -> control_port, object -> control_pin, 0);
 6da:	81 85       	ldd	r24, Z+9	; 0x09
 6dc:	62 85       	ldd	r22, Z+10	; 0x0a
 6de:	40 e0       	ldi	r20, 0x00	; 0
 6e0:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
 6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <display_digit+0x140>
		else 
			write_pin(object -> control_port, object -> control_pin, 1);
 6e6:	f8 01       	movw	r30, r16
 6e8:	81 85       	ldd	r24, Z+9	; 0x09
 6ea:	62 85       	ldd	r22, Z+10	; 0x0a
 6ec:	41 e0       	ldi	r20, 0x01	; 1
 6ee:	0e 94 3e 01 	call	0x27c	; 0x27c <write_pin>
	}
	return TRUE;	
}
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	df 90       	pop	r13
 702:	cf 90       	pop	r12
 704:	08 95       	ret

00000706 <init_switch>:
 *      Author: maged
 */
#include "switch.h"

uint8 init_switch (uint8 reg, uint8 pin_no) {
	init_pin(reg, pin_no, INPUT);
 706:	40 e0       	ldi	r20, 0x00	; 0
 708:	0e 94 17 01 	call	0x22e	; 0x22e <init_pin>
	return TRUE;
}
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	08 95       	ret

00000710 <read_switch>:

uint8 read_switch (uint8 reg, uint8 pin_no, uint8 mode) {
	if (mode == PULLUP) {
 710:	41 30       	cpi	r20, 0x01	; 1
 712:	21 f4       	brne	.+8      	; 0x71c <read_switch+0xc>
		return read_pin(reg, pin_no);	
 714:	0e 94 65 01 	call	0x2ca	; 0x2ca <read_pin>
 718:	98 2f       	mov	r25, r24
 71a:	0a c0       	rjmp	.+20     	; 0x730 <read_switch+0x20>
	}
	else if (mode == PULLDOWN){
 71c:	44 23       	and	r20, r20
 71e:	39 f4       	brne	.+14     	; 0x72e <read_switch+0x1e>
		return !(read_pin(reg, pin_no));
 720:	0e 94 65 01 	call	0x2ca	; 0x2ca <read_pin>
 724:	91 e0       	ldi	r25, 0x01	; 1
 726:	88 23       	and	r24, r24
 728:	19 f0       	breq	.+6      	; 0x730 <read_switch+0x20>
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	01 c0       	rjmp	.+2      	; 0x730 <read_switch+0x20>
 72e:	08 95       	ret
	}
}
 730:	89 2f       	mov	r24, r25
 732:	08 95       	ret

00000734 <WR_REG_8>:
 * the second one is the data
 * it deals completely with the hardware, so it only takes the data
 * and stores it in the specified address!
 */
uint8 WR_REG_8(uint8 address, uint8 val) {
	*(volatile uint8*) (address) = val;
 734:	e8 2f       	mov	r30, r24
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	60 83       	st	Z, r22
	return TRUE;
}
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	08 95       	ret

0000073e <WR_REG_16>:
 * the second one is the data
 * it deals completely with the hardware, so it only takes the data
 * and stores it in the specified address!
 */
uint8 WR_REG_16(uint16 address, uint16 val) {
	*(volatile uint16*) (address) = val;
 73e:	e8 2f       	mov	r30, r24
 740:	f9 2f       	mov	r31, r25
 742:	71 83       	std	Z+1, r23	; 0x01
 744:	60 83       	st	Z, r22
	return TRUE;
}
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	08 95       	ret

0000074a <SET_PIN>:

uint8 SET_PIN(uint8 address, uint8 val) {
	/* Making "|" will set a single pin leaving other pins as they are */
	*(volatile uint8*) (address) |= val;
 74a:	e8 2f       	mov	r30, r24
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	68 2b       	or	r22, r24
 752:	60 83       	st	Z, r22
	return TRUE;
}
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	08 95       	ret

00000758 <USART_init>:
 */ 

#include "usart.h"
#include "hw_types.h"

uint8 USART_init (USART_CONFIG_t * object) {
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	ec 01       	movw	r28, r24
	/* make TXD (PD1) as output */
	WR_REG_8(object -> port, 0x02);
 75e:	88 81       	ld	r24, Y
 760:	62 e0       	ldi	r22, 0x02	; 2
 762:	0e 94 9a 03 	call	0x734	; 0x734 <WR_REG_8>
	 * PROBLEM HERE!!		
	 */
	//F_CPU = (object ->oscillation_frequency)UL;
	
	/* setting the baud rate */
	WR_REG_8(USER_UBRRL, 0x00);
 766:	89 e2       	ldi	r24, 0x29	; 41
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	0e 94 9a 03 	call	0x734	; 0x734 <WR_REG_8>
	WR_REG_8(USER_UBRRH,(uint8) ((object ->baud_rate) >> 8));
 76e:	6b 81       	ldd	r22, Y+3	; 0x03
 770:	80 e4       	ldi	r24, 0x40	; 64
 772:	0e 94 9a 03 	call	0x734	; 0x734 <WR_REG_8>
	WR_REG_8(USER_UBRRL, (uint8) (object ->baud_rate));
 776:	89 e2       	ldi	r24, 0x29	; 41
 778:	6a 81       	ldd	r22, Y+2	; 0x02
 77a:	0e 94 9a 03 	call	0x734	; 0x734 <WR_REG_8>
	
	/* enable receiver and transmitter */
	WR_REG_8(USER_UCSRB, 0x18);
 77e:	8a e2       	ldi	r24, 0x2A	; 42
 780:	68 e1       	ldi	r22, 0x18	; 24
 782:	0e 94 9a 03 	call	0x734	; 0x734 <WR_REG_8>
	
	/* setting URSEL in USER_UCSRC to 1 as we will use URSEL in the following code
	 * that's because the USER_UCSRC and USER_UBRRH registers share the same i/o address
	 */
	SET_PIN(USER_UCSRC, 0x80);
 786:	80 e4       	ldi	r24, 0x40	; 64
 788:	60 e8       	ldi	r22, 0x80	; 128
 78a:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
	
	/* setting UMSEL in USER_UCSRC register to 1 or 0
	 * Problems:
	 * - We need to make a function for setting and resetting pin !?	
	 */
	if (object ->mode == SYNCHRONOUS) {
 78e:	8c 81       	ldd	r24, Y+4	; 0x04
 790:	81 30       	cpi	r24, 0x01	; 1
 792:	29 f4       	brne	.+10     	; 0x79e <USART_init+0x46>
		SET_PIN(USER_UCSRC, 0x40);
 794:	80 e4       	ldi	r24, 0x40	; 64
 796:	60 e4       	ldi	r22, 0x40	; 64
 798:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
 79c:	06 c0       	rjmp	.+12     	; 0x7aa <USART_init+0x52>
	} else if (object ->mode == ASYNCHRONOUS) {
 79e:	88 23       	and	r24, r24
 7a0:	21 f4       	brne	.+8      	; 0x7aa <USART_init+0x52>
		SET_PIN(USER_UCSRC, 0x00);
 7a2:	80 e4       	ldi	r24, 0x40	; 64
 7a4:	60 e0       	ldi	r22, 0x00	; 0
 7a6:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
	}
	
	/* setting the parity mode */
	switch (object ->parity_mode) {
 7aa:	8d 81       	ldd	r24, Y+5	; 0x05
 7ac:	81 30       	cpi	r24, 0x01	; 1
 7ae:	69 f0       	breq	.+26     	; 0x7ca <USART_init+0x72>
 7b0:	81 30       	cpi	r24, 0x01	; 1
 7b2:	30 f0       	brcs	.+12     	; 0x7c0 <USART_init+0x68>
 7b4:	82 30       	cpi	r24, 0x02	; 2
 7b6:	71 f0       	breq	.+28     	; 0x7d4 <USART_init+0x7c>
 7b8:	83 30       	cpi	r24, 0x03	; 3
 7ba:	09 f0       	breq	.+2      	; 0x7be <USART_init+0x66>
 7bc:	89 c0       	rjmp	.+274    	; 0x8d0 <__stack+0x71>
 7be:	0f c0       	rjmp	.+30     	; 0x7de <USART_init+0x86>
		case DISABLED:
		SET_PIN(USER_UCSRC, 0x00);
 7c0:	80 e4       	ldi	r24, 0x40	; 64
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
		break;
 7c8:	0e c0       	rjmp	.+28     	; 0x7e6 <USART_init+0x8e>
		
		case RESERVED:
		SET_PIN(USER_UCSRC, 0x10);
 7ca:	80 e4       	ldi	r24, 0x40	; 64
 7cc:	60 e1       	ldi	r22, 0x10	; 16
 7ce:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
		break;
 7d2:	09 c0       	rjmp	.+18     	; 0x7e6 <USART_init+0x8e>
		
		case EVEN:
		SET_PIN(USER_UCSRC, 0x20);
 7d4:	80 e4       	ldi	r24, 0x40	; 64
 7d6:	60 e2       	ldi	r22, 0x20	; 32
 7d8:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
		break;
 7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <USART_init+0x8e>
		
		case ODD:
		SET_PIN(USER_UCSRC, 0x30);
 7de:	80 e4       	ldi	r24, 0x40	; 64
 7e0:	60 e3       	ldi	r22, 0x30	; 48
 7e2:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
		default:
		return FALSE;
	}
	
	/* selecting whether the frame will contain 1 or 2 stop bits */
	if (object ->stop_bit_number == ONEBIT) {
 7e6:	8e 81       	ldd	r24, Y+6	; 0x06
 7e8:	88 23       	and	r24, r24
 7ea:	29 f4       	brne	.+10     	; 0x7f6 <USART_init+0x9e>
		SET_PIN(USER_UCSRC, 0x00);
 7ec:	80 e4       	ldi	r24, 0x40	; 64
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <USART_init+0xaa>
	} else if (object ->stop_bit_number == TWOBIT) {
 7f6:	81 30       	cpi	r24, 0x01	; 1
 7f8:	21 f4       	brne	.+8      	; 0x802 <USART_init+0xaa>
		SET_PIN(USER_UCSRC, 0x08);
 7fa:	80 e4       	ldi	r24, 0x40	; 64
 7fc:	68 e0       	ldi	r22, 0x08	; 8
 7fe:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
	
	/* setting the character size:
	 * we will use UCSZ0 & UCSZ1 in USER_UCSRC and UCSZ2 in USER USER_UCSRB
	 * use the configuration table in page 158 in the data sheet (table 20-7)	
	 */
	switch(object ->character_size) {
 802:	8f 81       	ldd	r24, Y+7	; 0x07
 804:	87 33       	cpi	r24, 0x37	; 55
 806:	e1 f0       	breq	.+56     	; 0x840 <USART_init+0xe8>
 808:	88 33       	cpi	r24, 0x38	; 56
 80a:	30 f4       	brcc	.+12     	; 0x818 <USART_init+0xc0>
 80c:	85 33       	cpi	r24, 0x35	; 53
 80e:	51 f0       	breq	.+20     	; 0x824 <USART_init+0xcc>
 810:	86 33       	cpi	r24, 0x36	; 54
 812:	09 f0       	breq	.+2      	; 0x816 <USART_init+0xbe>
 814:	5f c0       	rjmp	.+190    	; 0x8d4 <__stack+0x75>
 816:	0f c0       	rjmp	.+30     	; 0x836 <USART_init+0xde>
 818:	88 33       	cpi	r24, 0x38	; 56
 81a:	b9 f0       	breq	.+46     	; 0x84a <USART_init+0xf2>
 81c:	89 33       	cpi	r24, 0x39	; 57
 81e:	09 f0       	breq	.+2      	; 0x822 <USART_init+0xca>
 820:	59 c0       	rjmp	.+178    	; 0x8d4 <__stack+0x75>
 822:	18 c0       	rjmp	.+48     	; 0x854 <USART_init+0xfc>
		case '5':
		/* This statement doesn't do anything, it need to be modified after implementing the writing pin config */
		SET_PIN(USER_UCSRC, 0x00);
 824:	80 e4       	ldi	r24, 0x40	; 64
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
		SET_PIN(USER_UCSRB, 0x00);
 82c:	8a e2       	ldi	r24, 0x2A	; 42
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
		break;
 834:	17 c0       	rjmp	.+46     	; 0x864 <__stack+0x5>
		
		case '6':
		SET_PIN(USER_UCSRC, 0x02);
 836:	80 e4       	ldi	r24, 0x40	; 64
 838:	62 e0       	ldi	r22, 0x02	; 2
 83a:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
		break;
 83e:	12 c0       	rjmp	.+36     	; 0x864 <__stack+0x5>
		
		case '7':
		SET_PIN(USER_UCSRC, 0x04);
 840:	80 e4       	ldi	r24, 0x40	; 64
 842:	64 e0       	ldi	r22, 0x04	; 4
 844:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
		break;
 848:	0d c0       	rjmp	.+26     	; 0x864 <__stack+0x5>
		
		case '8':
		SET_PIN(USER_UCSRC, 0x06);
 84a:	80 e4       	ldi	r24, 0x40	; 64
 84c:	66 e0       	ldi	r22, 0x06	; 6
 84e:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
		break;
 852:	08 c0       	rjmp	.+16     	; 0x864 <__stack+0x5>
		
		case '9':
		SET_PIN(USER_UCSRC, 0x06);
 854:	80 e4       	ldi	r24, 0x40	; 64
 856:	66 e0       	ldi	r22, 0x06	; 6
 858:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
		SET_PIN(USER_UCSRB, 0x04);
 85c:	8a e2       	ldi	r24, 0x2A	; 42
 85e:	64 e0       	ldi	r22, 0x04	; 4
 860:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
		default:
		return FALSE;
	}
	
	/* setting the clock polarity to rising or falling .. writing UCPOL in USER_UCSRC to 0 or 1 */
	if (object ->clock_polarity == RISING_TRANSMIT && (object ->mode == SYNCHRONOUS)) {
 864:	88 85       	ldd	r24, Y+8	; 0x08
 866:	88 23       	and	r24, r24
 868:	41 f4       	brne	.+16     	; 0x87a <__stack+0x1b>
 86a:	9c 81       	ldd	r25, Y+4	; 0x04
 86c:	91 30       	cpi	r25, 0x01	; 1
 86e:	29 f4       	brne	.+10     	; 0x87a <__stack+0x1b>
		SET_PIN(USER_UCSRC, 0x00);
 870:	80 e4       	ldi	r24, 0x40	; 64
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
 878:	09 c0       	rjmp	.+18     	; 0x88c <__stack+0x2d>
	} else if (object ->clock_polarity == FALLING_TRANSMIT && (object ->mode == SYNCHRONOUS)) {
 87a:	81 30       	cpi	r24, 0x01	; 1
 87c:	39 f4       	brne	.+14     	; 0x88c <__stack+0x2d>
 87e:	8c 81       	ldd	r24, Y+4	; 0x04
 880:	81 30       	cpi	r24, 0x01	; 1
 882:	21 f4       	brne	.+8      	; 0x88c <__stack+0x2d>
		SET_PIN(USER_UCSRC, 0x01);
 884:	80 e4       	ldi	r24, 0x40	; 64
 886:	61 e0       	ldi	r22, 0x01	; 1
 888:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
	}
	
	/* setting the double transmission speed, setting U2X in USER_UCSRA register */
	if ((object ->transmission_speed_double == EN_DOUBLE_TX) && (object ->mode == SYNCHRONOUS)) {
 88c:	89 85       	ldd	r24, Y+9	; 0x09
 88e:	81 30       	cpi	r24, 0x01	; 1
 890:	41 f4       	brne	.+16     	; 0x8a2 <__stack+0x43>
 892:	9c 81       	ldd	r25, Y+4	; 0x04
 894:	91 30       	cpi	r25, 0x01	; 1
 896:	29 f4       	brne	.+10     	; 0x8a2 <__stack+0x43>
		SET_PIN(USER_UCSRA, 0x02);
 898:	8b e2       	ldi	r24, 0x2B	; 43
 89a:	62 e0       	ldi	r22, 0x02	; 2
 89c:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
 8a0:	06 c0       	rjmp	.+12     	; 0x8ae <__stack+0x4f>
	} else if (object ->transmission_speed_double == DIS_DOUBLE_TX) {
 8a2:	88 23       	and	r24, r24
 8a4:	21 f4       	brne	.+8      	; 0x8ae <__stack+0x4f>
		SET_PIN(USER_UCSRA, 0x00);
 8a6:	8b e2       	ldi	r24, 0x2B	; 43
 8a8:	60 e0       	ldi	r22, 0x00	; 0
 8aa:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
	}
	
	/* setting the multiprocessor mode, setting MPCM in USER_UCSRA register */
	if (object ->multiprocessor_mode == MULTIPROCESSOR) {
 8ae:	8a 85       	ldd	r24, Y+10	; 0x0a
 8b0:	81 30       	cpi	r24, 0x01	; 1
 8b2:	31 f4       	brne	.+12     	; 0x8c0 <__stack+0x61>
		SET_PIN(USER_UCSRA, 0x01);
 8b4:	8b e2       	ldi	r24, 0x2B	; 43
 8b6:	61 e0       	ldi	r22, 0x01	; 1
 8b8:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
	} else if (object ->multiprocessor_mode == SINGLEPROCESSOR) {
		SET_PIN(USER_UCSRA, 0x00);
	}
	return TRUE;
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	0d c0       	rjmp	.+26     	; 0x8da <__stack+0x7b>
	}
	
	/* setting the multiprocessor mode, setting MPCM in USER_UCSRA register */
	if (object ->multiprocessor_mode == MULTIPROCESSOR) {
		SET_PIN(USER_UCSRA, 0x01);
	} else if (object ->multiprocessor_mode == SINGLEPROCESSOR) {
 8c0:	88 23       	and	r24, r24
 8c2:	51 f4       	brne	.+20     	; 0x8d8 <__stack+0x79>
		SET_PIN(USER_UCSRA, 0x00);
 8c4:	8b e2       	ldi	r24, 0x2B	; 43
 8c6:	60 e0       	ldi	r22, 0x00	; 0
 8c8:	0e 94 a5 03 	call	0x74a	; 0x74a <SET_PIN>
	}
	return TRUE;
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	05 c0       	rjmp	.+10     	; 0x8da <__stack+0x7b>
		SET_PIN(USER_UCSRC, 0x30);
		break;
		
		/* signal error when the user enter a false parity mode */
		default:
		return FALSE;
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	03 c0       	rjmp	.+6      	; 0x8da <__stack+0x7b>
		SET_PIN(USER_UCSRB, 0x04);
		break;
		
		/* signal an error if the character size is less than 5 or greater than 9 */
		default:
		return FALSE;
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	01 c0       	rjmp	.+2      	; 0x8da <__stack+0x7b>
	if (object ->multiprocessor_mode == MULTIPROCESSOR) {
		SET_PIN(USER_UCSRA, 0x01);
	} else if (object ->multiprocessor_mode == SINGLEPROCESSOR) {
		SET_PIN(USER_UCSRA, 0x00);
	}
	return TRUE;
 8d8:	81 e0       	ldi	r24, 0x01	; 1
}
 8da:	df 91       	pop	r29
 8dc:	cf 91       	pop	r28
 8de:	08 95       	ret

000008e0 <USART_transmit>:
	 */
	while (!(USER_UCSRA & 0x20))
		;
	
	/* inserting data into buffer */
	WR_REG_8(USER_UDR, data);
 8e0:	8c e2       	ldi	r24, 0x2C	; 44
 8e2:	0e 94 9a 03 	call	0x734	; 0x734 <WR_REG_8>
	
	return TRUE;
}
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	08 95       	ret

000008ea <USART_recieve>:

uint8 USART_recieve (USART_CONFIG_t * object) {
 8ea:	ff cf       	rjmp	.-2      	; 0x8ea <USART_recieve>

000008ec <__udivmodqi4>:
 8ec:	99 1b       	sub	r25, r25
 8ee:	79 e0       	ldi	r23, 0x09	; 9
 8f0:	04 c0       	rjmp	.+8      	; 0x8fa <__udivmodqi4_ep>

000008f2 <__udivmodqi4_loop>:
 8f2:	99 1f       	adc	r25, r25
 8f4:	96 17       	cp	r25, r22
 8f6:	08 f0       	brcs	.+2      	; 0x8fa <__udivmodqi4_ep>
 8f8:	96 1b       	sub	r25, r22

000008fa <__udivmodqi4_ep>:
 8fa:	88 1f       	adc	r24, r24
 8fc:	7a 95       	dec	r23
 8fe:	c9 f7       	brne	.-14     	; 0x8f2 <__udivmodqi4_loop>
 900:	80 95       	com	r24
 902:	08 95       	ret

00000904 <_exit>:
 904:	f8 94       	cli

00000906 <__stop_program>:
 906:	ff cf       	rjmp	.-2      	; 0x906 <__stop_program>
